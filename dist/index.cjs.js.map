{"version":3,"file":"index.cjs.js","sources":["../src/components/common/unversalIcon/UniversalIcon.tsx","../src/components/alerts/Alerts.tsx","../src/components/button/Button.tsx","../src/components/card/Card.tsx","../src/components/checkbox/Checkbox.tsx","../src/components/selectbox/SelectItem.tsx","../src/components/selectbox/Selectbox.tsx","../src/components/header/Header.tsx","../src/components/input/Input.tsx","../src/components/radio/Radio.tsx","../src/components/reCaptcha/ReCaptcha.tsx","../src/components/textArea/TextArea.tsx"],"sourcesContent":["import React from 'react'\r\n\r\nimport parse from 'html-react-parser'\r\n\r\nexport const UniversalIcon = ({ name }: { name: string }) => {\r\n  const [svgElement, setSvgElement] = React.useState<React.ReactNode>(null)\r\n\r\n  React.useEffect(() => {\r\n    fetch(`./assets/icons/${name}.svg`)\r\n      .then(res => res.text())\r\n      .then(svgString => {\r\n        const parsed = parse(svgString)\r\n\r\n        setSvgElement(parsed)\r\n      })\r\n  }, [name])\r\n\r\n  return svgElement\r\n}\r\n","import { ComponentProps, FC, ReactNode } from 'react'\r\n\r\nimport { clsx } from 'clsx'\r\n\r\nimport s from './alerts.module.scss'\r\n\r\nimport { UniversalIcon } from '../common/unversalIcon/UniversalIcon'\r\n\r\nexport type AlertProps = {\r\n  /**\r\n   * **Required**: The content of the alert (usually text or elements).\r\n   */\r\n  children: ReactNode\r\n  /**\r\n   * Visual variant of the alert. Can be 'success' (green) or 'error' (red).\r\n   * Defaults to no variant styling.\r\n   */\r\n  variant?: 'success' | 'error'\r\n  /**\r\n   * Callback fired when the close button is clicked.\r\n   */\r\n  onClose?: () => void\r\n  /**\r\n   * **Required**: If true, the alert can be closed via a close button.\r\n   */\r\n  closable: boolean\r\n  /**\r\n   * If true, the alert stretches to the full width of its container.\r\n   */\r\n  fullWidth?: boolean\r\n} & ComponentProps<'div'>\r\n\r\nexport const Alert: FC<AlertProps> = ({\r\n  children,\r\n  variant = 'success',\r\n  onClose,\r\n  closable = true,\r\n  fullWidth = false,\r\n  ...rest\r\n}) => {\r\n  const classNames = {\r\n    box: clsx(s.box, variant === 'success' ? s.success : s.error, fullWidth && s.fullWidth),\r\n    content: s.content,\r\n    icon: clsx(s.icon),\r\n  }\r\n\r\n  return (\r\n    <div className={classNames.box} {...rest}>\r\n      <div className={classNames.content}>\r\n        {variant === 'error' ? (\r\n          <div>\r\n            <strong>Error!</strong> {children}\r\n          </div>\r\n        ) : (\r\n          <>{children}</>\r\n        )}\r\n        {closable && (\r\n          <span className={classNames.icon} onClick={onClose}>\r\n            <UniversalIcon name={'close'} />\r\n          </span>\r\n        )}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import { ComponentPropsWithoutRef, ElementType, ReactNode } from 'react'\r\n\r\nimport { clsx } from 'clsx'\r\n\r\nimport s from './button.module.scss'\r\n\r\nexport const buttonVariant = ['primary', 'secondary', 'outline', 'text_button'] as const\r\nexport type ButtonVariant = (typeof buttonVariant)[number]\r\n\r\nexport type ButtonOwnProps<T extends ElementType = 'button'> = {\r\n  /**  * The element or component to render as. For example, 'button', 'a' etc. Default = 'button */\r\n  as?: T\r\n  /**  * Makes the button take up the full width of its container. */\r\n  fullWidth?: boolean\r\n  /**  * Visual style variant of the button.*/\r\n  variant?: ButtonVariant\r\n  /**  * Disables the button.*/\r\n  disabled?: boolean\r\n  /**  **Required**: Button content.*/\r\n  children: ReactNode\r\n}\r\n\r\nexport type ButtonProps<T extends ElementType = 'button'> = ButtonOwnProps<T> &\r\n  Omit<ComponentPropsWithoutRef<T>, keyof ButtonOwnProps<T>>\r\n\r\nexport const Button = <T extends ElementType = 'button'>({\r\n  as,\r\n  children,\r\n  fullWidth = false,\r\n  className,\r\n  variant = 'primary',\r\n  ...rest\r\n}: ButtonProps<T>) => {\r\n  const classNames = clsx(s.button, s[variant], fullWidth && s.fullWidth, className)\r\n  const Component = (as || 'button') as ElementType\r\n\r\n  return (\r\n    <Component className={classNames} {...rest}>\r\n      {children}\r\n    </Component>\r\n  )\r\n}\r\n","import { ReactNode } from 'react';\r\n\r\nimport { clsx } from 'clsx';\r\n\r\nimport styles from './card.module.scss';\r\n\r\ntype cardSize = 'sm' | 'md' | 'lg';\r\n\r\ntype Props = {\r\n  /**\r\n   * Controls the card's padding and font scaling.\r\n   * @default 'md'\r\n   */\r\n  size?: cardSize;\r\n  /**\r\n   * Content to render inside the card.\r\n   * Accepts strings, JSX, arrays, etc.\r\n   */\r\n  children?: ReactNode;\r\n  /**\r\n   * When `true`, forces the card to occupy 100% of its parent's width.\r\n   * @default false\r\n   */\r\n  fullWidth?: boolean;\r\n};\r\n\r\nexport const Card = ({ children, fullWidth, size = 'md' }: Props) => {\r\n  const classNames = clsx(styles.cardBody, fullWidth && styles.fullWidth);\r\n\r\n  return (\r\n    <div className={classNames} data-cardSize={size}>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n","import { ComponentPropsWithoutRef } from 'react'\r\n\r\nimport { CheckIcon } from '@radix-ui/react-icons'\r\nimport { Checkbox as RadixCheckbox } from 'radix-ui'\r\n\r\nimport s from './checkbox.module.scss'\r\n\r\ntype CheckboxProps = {\r\n  /** **Required**: Unique identifier for the checkbox */\r\n  idProp: string\r\n  /** Label displayed next to the checkbox */\r\n  label?: string\r\n  /** Additional class name for styling */\r\n  className?: string\r\n  /** Disables the checkbox */\r\n  disabled?: boolean\r\n  /** Controls the checked state (if controlled externally) */\r\n  checked?: boolean\r\n} & ComponentPropsWithoutRef<typeof RadixCheckbox.Root>\r\n\r\nexport const Checkbox = ({ label, idProp, className, disabled, ...props }: CheckboxProps) => (\r\n  <div style={{ display: 'flex', alignItems: 'center' }}>\r\n    <RadixCheckbox.Root\r\n      className={s.Root}\r\n      defaultChecked\r\n      id={idProp}\r\n      aria-disabled={disabled}\r\n      {...props}\r\n    >\r\n      <RadixCheckbox.Indicator className={s.Indicator} aria-disabled={disabled}>\r\n        <CheckIcon />\r\n      </RadixCheckbox.Indicator>\r\n    </RadixCheckbox.Root>\r\n    <label className={s.Label} htmlFor={idProp} aria-disabled={disabled}>\r\n      {label}\r\n    </label>\r\n  </div>\r\n)\r\n","import * as React from 'react'\r\nimport { ComponentPropsWithoutRef, ElementRef, ForwardedRef } from 'react'\r\n\r\nimport clsx from 'clsx'\r\nimport { Select } from 'radix-ui'\r\n\r\nimport s from './selectbox.module.scss'\r\n\r\ntype SelectItemProps = {\r\n  value: string\r\n  children: React.ReactNode\r\n} & ComponentPropsWithoutRef<typeof Select.Item>\r\n\r\nexport const SelectItem = React.forwardRef<ElementRef<typeof Select.Item>, SelectItemProps>(\r\n  (\r\n    { children, className, ...props }: SelectItemProps,\r\n    forwardedRef: ForwardedRef<ElementRef<typeof Select.Item>>\r\n  ): React.ReactElement => {\r\n    return (\r\n      <Select.Item className={clsx(s.Item, className)} {...props} ref={forwardedRef}>\r\n        <Select.ItemText className={s.ItemContent}>{children}</Select.ItemText>\r\n      </Select.Item>\r\n    )\r\n  }\r\n)\r\n","import {ComponentPropsWithoutRef, FC} from 'react'\r\n\r\nimport {ChevronDownIcon} from '@radix-ui/react-icons'\r\nimport {Select} from 'radix-ui'\r\n\r\nimport '../../styles/index.scss'\r\n\r\nimport s from './selectbox.module.scss'\r\n\r\nimport {SelectItem} from './SelectItem'\r\nimport {UniversalIcon} from \"../common/unversalIcon/UniversalIcon\";\r\nimport {clsx} from \"clsx\";\r\n\r\ntype LanguageType = 'rus' | 'eng'\r\n\r\ntype OptionType = {\r\n  value: LanguageType | string,\r\n  label: string,\r\n  icon?: string\r\n}\r\n\r\ntype SelectboxProps = {\r\n  /** **Required**: Unique ID for the Select. Trigger and associated label */\r\n  idProp: string\r\n  /** **Required**: Name attribute for the form (useful when submitting forms) */\r\n  name: string\r\n  /** **Required**: Array of options to choose from, each with a label (display text) and value */\r\n  options: OptionType[]\r\n  /** Placeholder text shown when no option is selected */\r\n  placeholder?: string\r\n  /** Initial value */\r\n  value?: string;\r\n  /** Label displayed above the select input */\r\n  label?: string\r\n  /** Disables the select input */\r\n  disabled?: boolean\r\n  /** Additional CSS class names for the root element */\r\n  className?: string\r\n  /** If true, the select input stretches to the full width of its container */\r\n  fullWidth?: boolean\r\n  /** Callback fired when the selected value changes */\r\n  onValueChange?: (value: string) => void\r\n  /** Callback fired when the dropdown opens or closes */\r\n  onOpenChange?: (open: boolean) => void\r\n} & Omit<ComponentPropsWithoutRef<typeof Select.Root>, 'value' | 'onValueChange' | 'children'>\r\n\r\nexport const Selectbox: FC<SelectboxProps> = ({\r\n                                                idProp,\r\n                                                name,\r\n                                                label = '',\r\n                                                placeholder = 'Select...',\r\n                                                disabled = false,\r\n                                                className,\r\n                                                value,\r\n                                                fullWidth,\r\n                                                onValueChange,\r\n                                                onOpenChange,\r\n                                                options,\r\n                                                ...rest\r\n                                              }: SelectboxProps) => {\r\n  const selectedOption: OptionType | undefined = options.find(opt => opt.value === value);\r\n\r\n  return (\r\n    <Select.Root onValueChange={onValueChange} onOpenChange={onOpenChange} {...rest}>\r\n      {label && (\r\n        <label htmlFor={idProp} className={s.Label}>\r\n          {label}\r\n        </label>\r\n      )}\r\n      <Select.Trigger\r\n        id={idProp}\r\n        className={clsx(s.Trigger, fullWidth && s.fullWidth)}\r\n        disabled={disabled}\r\n        aria-label={label}\r\n        data-label={label ? 'true' : 'false'}\r\n        name={name}\r\n      >\r\n        {selectedOption ? (\r\n          <div className={s.Selected}>\r\n            {selectedOption.icon && (\r\n              <span className={s.IconWrapper}><UniversalIcon name={selectedOption.icon}/></span>\r\n            )}\r\n            {selectedOption.label}\r\n          </div>\r\n        ) : (\r\n          <Select.Value placeholder={placeholder}/>\r\n        )}\r\n        <Select.Icon className={s.Icon}>\r\n          <ChevronDownIcon/>\r\n        </Select.Icon>\r\n      </Select.Trigger>\r\n\r\n      <Select.Portal>\r\n        <Select.Content className={s.Content} side={'bottom'} position={'popper'}>\r\n          <Select.Viewport className={s.Viewport}>\r\n            <Select.Group>\r\n              {options.map(option => (\r\n                <SelectItem className={s.Selected} key={option.value} value={option.value}>\r\n                  {option.icon && <span><UniversalIcon name={option.icon}/></span>}\r\n                  {option.label}\r\n                </SelectItem>\r\n              ))}\r\n            </Select.Group>\r\n          </Select.Viewport>\r\n        </Select.Content>\r\n      </Select.Portal>\r\n    </Select.Root>\r\n  )\r\n}\r\n","import {Selectbox} from \"../selectbox\";\r\nimport {UniversalIcon} from \"../common/unversalIcon/UniversalIcon\";\r\nimport {Button} from \"../button\";\r\n\r\nimport '../../styles/index.scss'\r\nimport s from './header.module.scss'\r\n\r\ntype Props = {\r\n  /** **Required**: Indicates if the user is authenticated */\r\n  isAuth: boolean,\r\n  /** Indicates if the user is authenticated */\r\n  isProcessingAuth?: boolean,\r\n  /** **Required**: Current selected localization value */\r\n  localization: string,\r\n  /** Optional number of notifications to display. If not provided, defaults to 0 */\r\n  notificationCount?: number,\r\n}\r\n\r\nexport const Header = ({\r\n                         isAuth,\r\n                         isProcessingAuth = false,\r\n                         localization,\r\n                         notificationCount = 0\r\n                       }: Props) => {\r\n  const convertNumber = (notificationCount: number): string => {\r\n    return notificationCount > 9 ? `9+` : `${notificationCount}`\r\n  }\r\n\r\n  return (\r\n    <header className={s.Header}>\r\n      <div>\r\n          <span className={s.Logo}>\r\n            Inctagram\r\n          </span>\r\n      </div>\r\n      <div className={s.Content}>\r\n        {isAuth && (\r\n          <div className={s.IconWrapper} data-notificationCount={convertNumber(notificationCount)}>\r\n            <UniversalIcon name={'outline-bell'}/>\r\n          </div>\r\n        )}\r\n        <Selectbox value={localization} name={'aaa'}\r\n                   options={[\r\n                     {label: 'Russian', value: 'rus', icon: 'Flag-Russia'},\r\n                     {label: 'English', value: 'eng', icon: 'Flag-United-Kingdom'}\r\n                   ]}\r\n                   idProp={localization}\r\n        />\r\n        {!isAuth && !isProcessingAuth && (\r\n          <>\r\n            <Button variant='text_button'>Sign in</Button>\r\n            <Button variant='primary'>Sign up</Button>\r\n          </>\r\n        )}\r\n      </div>\r\n    </header>\r\n  )\r\n}\r\n","import { InputHTMLAttributes, useState } from 'react'\r\n\r\nimport { clsx } from 'clsx'\r\n\r\nimport s from './input.module.scss'\r\n\r\nimport { UniversalIcon } from '@/components'\r\n\r\ntype InputVariant = 'search' | 'email' | 'password' | 'text'\r\n\r\ntype InputProps = InputHTMLAttributes<HTMLInputElement> & {\r\n  /** Defines the visual style of the input (e.g., \"search\", \"password\", \"text\"). */\r\n  inputType: InputVariant\r\n  /**  Optional label text displayed above the input field. */\r\n  label?: string\r\n  /** Error message displayed below the input when error is true. */\r\n  errorText?: string\r\n  /** \tIf true, the input spans 100% of its container width. */\r\n  fullWidth?: boolean\r\n}\r\n\r\nexport const Input = ({\r\n  id,\r\n  label,\r\n  inputType,\r\n  errorText,\r\n  disabled = false,\r\n  fullWidth = false,\r\n  required,\r\n  ...rest\r\n}: InputProps) => {\r\n  const [showPassword, setShowPassword] = useState(false)\r\n\r\n  const containerClassNames = clsx(s.inputContainer, errorText && s.error, fullWidth && s.fullWidth)\r\n\r\n  const isPassword = inputType === 'password'\r\n  const isSearch = inputType === 'search'\r\n\r\n  const currentInputType = (variants: InputVariant) => {\r\n    if (isPassword) {\r\n      return showPassword ? 'text' : 'password'\r\n    } else {\r\n      return variants\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={s.wrapper}>\r\n      {label && (\r\n        <label\r\n          data-requiredField={required}\r\n          htmlFor={id}\r\n          className={s.label}\r\n          data-disabled={disabled}\r\n        >\r\n          {label}\r\n        </label>\r\n      )}\r\n      <div className={containerClassNames} data-disabled={disabled}>\r\n        {isSearch && (\r\n          <button type={'submit'} className={s.iconButton} data-disabled={disabled}>\r\n            <UniversalIcon name={'search'} />\r\n          </button>\r\n        )}\r\n        <input\r\n          id={id}\r\n          type={currentInputType(inputType)}\r\n          required={required}\r\n          className={s.input}\r\n          autoComplete={'off'}\r\n          {...rest}\r\n        />\r\n\r\n        {isPassword && (\r\n          <button\r\n            type={'button'}\r\n            className={s.iconButton}\r\n            onClick={() => setShowPassword(!showPassword)}\r\n          >\r\n            {showPassword ? (\r\n              <UniversalIcon name={'eye-outline'} />\r\n            ) : (\r\n              <UniversalIcon name={'eye-off-outline'} />\r\n            )}\r\n          </button>\r\n        )}\r\n      </div>\r\n\r\n      {errorText && <div className={s.errorText}>{errorText}</div>}\r\n    </div>\r\n  )\r\n}\r\n","import { ComponentProps, InputHTMLAttributes, ReactElement } from 'react'\r\n\r\nimport { RadioGroup } from 'radix-ui'\r\n\r\nimport styles from './radio.module.scss'\r\n\r\nexport type RadioOptionsType = {\r\n  id: string\r\n  radioName: string\r\n}\r\n\r\ntype Props = ComponentProps<typeof RadioGroup.Root> &\r\n  InputHTMLAttributes<HTMLInputElement> & {\r\n    /** **Required**:Array of radio button options*/\r\n    options: RadioOptionsType[]\r\n    /** Disables all radio buttons */\r\n    selectedOption?: string\r\n  }\r\n\r\nexport const Radio = ({ options, defaultValue, disabled, ...rest }: Props): ReactElement => (\r\n  <RadioGroup.Root\r\n    className={styles.Root}\r\n    defaultValue={'default'}\r\n    aria-label={'View density'}\r\n    {...rest}\r\n  >\r\n    {options?.length &&\r\n      options.map(option => (\r\n        <div\r\n          className={disabled ? styles.disabled : ''}\r\n          style={{ display: 'flex', alignItems: 'center' }}\r\n          key={option.id}\r\n        >\r\n          <RadioGroup.Item className={styles.Item} value={option.radioName} id={option.id}>\r\n            <RadioGroup.Indicator className={styles.Indicator} />\r\n          </RadioGroup.Item>\r\n          <label className={styles.Label} htmlFor={option.id}>\r\n            {option.radioName}\r\n          </label>\r\n        </div>\r\n      ))}\r\n  </RadioGroup.Root>\r\n)\r\n","import { ReactElement } from 'react'\r\nimport ReCAPTCHA from 'react-google-recaptcha'\r\n\r\nimport { clsx } from 'clsx'\r\n\r\nimport styles from './ReCaptcha.module.scss'\r\n\r\ntype Props = {\r\n  /** **Required**: Tracks if captcha verification was completed successfully */\r\n  isCaptchaPassed: boolean\r\n  /** **Required**: Callback that receives the verification token string */\r\n  setCaptchaToken: (token: string) => void\r\n}\r\n\r\n/**\r\n * ReCaptcha component that integrates Google reCAPTCHA v2\r\n * @component\r\n * @param {Object} props - Component props\r\n * @param {boolean} props.isCaptchaPassed - Flag indicating if captcha was successfully passed\r\n * @param {function(string): void} props.setCaptchaToken - Callback function to set the captcha token\r\n * @returns {JSX.Element} - Rendered reCAPTCHA component\r\n *\r\n * @example\r\n * // Basic usage\r\n * <ReCaptcha\r\n *   isCaptchaPassed={isVerified}\r\n *   setCaptchaToken={(token) => setToken(token)}\r\n * />\r\n */\r\n\r\nexport const ReCaptcha = ({ isCaptchaPassed, setCaptchaToken }: Props): ReactElement => {\r\n  const submitHandler = (token: string | null) => {\r\n    if (isCaptchaPassed && token) {\r\n      setCaptchaToken(token)\r\n    }\r\n  }\r\n\r\n  const classNames = clsx(styles.reCaptchaWrapper, !isCaptchaPassed && styles.reCaptchaError)\r\n\r\n  return (\r\n    <div className={classNames}>\r\n      <ReCAPTCHA\r\n        sitekey={'6Lc42W4rAAAAALRY3UMLjkJQojl_FCxLdjtDh_6o'}\r\n        onChange={submitHandler}\r\n        theme={'dark'}\r\n      />\r\n      {!isCaptchaPassed && (\r\n        <span className={styles.reCaptchaText}>Please verify that you are not a robot</span>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n","import { ComponentPropsWithoutRef, ElementType } from 'react'\r\n\r\nimport { clsx } from 'clsx'\r\n\r\nimport s from './textArea.module.scss'\r\n\r\nexport const textAreaVariant = ['default']\r\n\r\nexport type TextAreaVariant = (typeof textAreaVariant)[number]\r\n\r\nexport type TextAreaProps<T extends ElementType = 'textarea'> = {\r\n  /**\r\n   * Custom component or HTML element to render instead of the default 'textarea'.\r\n   * Useful for styling or using a wrapper component.\r\n   */\r\n  as?: T\r\n  /**\r\n   * Visual style variant for the TextArea (e.g. 'default', etc.).\r\n   */\r\n  variant?: TextAreaVariant\r\n  /**\r\n   * Label text displayed above the TextArea.\r\n   */\r\n  label?: string\r\n  /**\r\n   * If true, displays the component in an error state.\r\n   */\r\n  error?: boolean\r\n  /**\r\n   * Error message shown below the TextArea when `error` is true.\r\n   */\r\n  errorText?: string\r\n  /**\r\n   * If true, makes the TextArea take up the full width of its container.\r\n   */\r\n  fullWidth?: boolean\r\n  /**\r\n   * **Required**: ID for Text area.\r\n   */\r\n  id: string\r\n  asChild?: boolean\r\n} & ComponentPropsWithoutRef<T>\r\n\r\nexport const TextAreaComponent = <T extends ElementType = 'textarea'>(props: TextAreaProps<T>) => {\r\n  const {\r\n    className,\r\n    variant = 'default',\r\n    label,\r\n    error,\r\n    errorText,\r\n    disabled = false,\r\n    fullWidth = false,\r\n    id,\r\n    ...rest\r\n  } = props\r\n\r\n  const classNames = clsx(\r\n    s.textArea,\r\n    error ? s.error : s[variant],\r\n    disabled && s.disabled,\r\n    fullWidth && s.fullWidth,\r\n    className\r\n  )\r\n\r\n  return (\r\n    <div className={s.bodyTextArea}>\r\n      {label && (\r\n        <label className={s.label} htmlFor={id}>\r\n          {label}\r\n        </label>\r\n      )}\r\n      <textarea className={classNames} disabled={disabled} id={id} {...rest} />\r\n      {error && errorText && <div className={s.errorText}>{errorText}</div>}\r\n    </div>\r\n  )\r\n}\r\n"],"names":["UniversalIcon","name","svgElement","setSvgElement","React","res","svgString","parsed","parse","Alert","children","variant","onClose","closable","fullWidth","rest","classNames","clsx","s","jsx","jsxs","buttonVariant","Button","as","className","Component","Card","size","styles","Checkbox","label","idProp","disabled","props","RadixCheckbox","CheckIcon","SelectItem","forwardedRef","Select","Selectbox","placeholder","value","onValueChange","onOpenChange","options","selectedOption","opt","ChevronDownIcon","option","Header","isAuth","isProcessingAuth","localization","notificationCount","convertNumber","Fragment","Input","id","inputType","errorText","required","showPassword","setShowPassword","useState","containerClassNames","isPassword","isSearch","currentInputType","variants","Radio","defaultValue","RadioGroup","ReCaptcha","isCaptchaPassed","setCaptchaToken","submitHandler","token","ReCAPTCHA","textAreaVariant","TextAreaComponent","error"],"mappings":"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"}