{"version":3,"file":"index.cjs.js","sources":["../src/components/common/unversalIcon/UniversalIcon.tsx","../src/components/alerts/Alerts.tsx","../src/components/button/Button.tsx","../src/components/card/Card.tsx","../src/components/checkbox/Checkbox.tsx","../src/components/selectbox/SelectItem.tsx","../src/components/selectbox/Selectbox.tsx","../src/components/header/Header.tsx","../src/components/input/Input.tsx","../src/components/radio/Radio.tsx","../src/components/reCaptcha/ReCaptcha.tsx","../src/components/textArea/TextArea.tsx"],"sourcesContent":["import React from 'react'\r\n\r\nimport parse, {domToReact, HTMLReactParserOptions, Element, DOMNode} from 'html-react-parser'\r\n\r\ntype Props = {\r\n  name: string\r\n  dataStatic?: boolean\r\n  width?: string\r\n  height?: string\r\n}\r\n\r\nexport const UniversalIcon = ({\r\n                                name,\r\n                                dataStatic = false,\r\n                                width = '24px',\r\n                                height = '24px',\r\n                              }: Props) => {\r\n  const [svgElement, setSvgElement] = React.useState<React.ReactNode>(null)\r\n\r\n  React.useEffect(() => {\r\n    fetch(`/assets/icons/${name}.svg`)\r\n      .then(res => res.text())\r\n      .then(svgString => {\r\n        const options: HTMLReactParserOptions = {\r\n          replace: (domNode) => {\r\n            if (domNode.type === 'tag' && (domNode as Element).name === 'svg') {\r\n              const el = domNode as Element;\r\n\r\n              const attribs = {\r\n                ...el.attribs,\r\n                ...(dataStatic ? {'data-static': 'true'} : {'data-static': 'false'}),\r\n                width: width,\r\n                height: height,\r\n              };\r\n              return (\r\n                <svg {...attribs}>\r\n                  {domToReact(el.children as DOMNode[], options)}\r\n                </svg>\r\n              );\r\n            }\r\n          },\r\n        };\r\n\r\n        const parsed = parse(svgString, options)\r\n        setSvgElement(parsed)\r\n      })\r\n  }, [name, dataStatic])\r\n\r\n  return svgElement\r\n}\r\n","import { ComponentProps, FC, ReactNode } from 'react'\r\n\r\nimport { clsx } from 'clsx'\r\n\r\nimport s from './alerts.module.scss'\r\n\r\nimport { UniversalIcon } from '../common/unversalIcon/UniversalIcon'\r\n\r\nexport type AlertProps = {\r\n  /**\r\n   * **Required**: The content of the alert (usually text or elements).\r\n   */\r\n  children: ReactNode\r\n  /**\r\n   * Visual variant of the alert. Can be 'success' (green) or 'error' (red).\r\n   * Defaults to no variant styling.\r\n   */\r\n  variant?: 'success' | 'error'\r\n  /**\r\n   * Callback fired when the close button is clicked.\r\n   */\r\n  onClose?: () => void\r\n  /**\r\n   * **Required**: If true, the alert can be closed via a close button.\r\n   */\r\n  closable: boolean\r\n  /**\r\n   * If true, the alert stretches to the full width of its container.\r\n   */\r\n  fullWidth?: boolean\r\n} & ComponentProps<'div'>\r\n\r\nexport const Alert: FC<AlertProps> = ({\r\n  children,\r\n  variant = 'success',\r\n  onClose,\r\n  closable = true,\r\n  fullWidth = false,\r\n  ...rest\r\n}) => {\r\n  const classNames = {\r\n    box: clsx(s.box, variant === 'success' ? s.success : s.error, fullWidth && s.fullWidth),\r\n    content: s.content,\r\n    icon: clsx(s.icon),\r\n  }\r\n\r\n  return (\r\n    <div className={classNames.box} {...rest}>\r\n      <div className={classNames.content}>\r\n        {variant === 'error' ? (\r\n          <div>\r\n            <strong>Error!</strong> {children}\r\n          </div>\r\n        ) : (\r\n          <>{children}</>\r\n        )}\r\n        {closable && (\r\n          <span className={classNames.icon} onClick={onClose}>\r\n            <UniversalIcon name={'close'} />\r\n          </span>\r\n        )}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import { ComponentPropsWithoutRef, ElementType, ReactNode } from 'react'\r\n\r\nimport { clsx } from 'clsx'\r\n\r\nimport s from './button.module.scss'\r\n\r\nexport const buttonVariant = ['primary', 'secondary', 'outline', 'text_button'] as const\r\nexport type ButtonVariant = (typeof buttonVariant)[number]\r\n\r\nexport type ButtonOwnProps<T extends ElementType = 'button'> = {\r\n  /**  * The element or component to render as. For example, 'button', 'a' etc. Default = 'button */\r\n  as?: T\r\n  /**  * Makes the button take up the full width of its container. */\r\n  fullWidth?: boolean\r\n  /**  * Visual style variant of the button.*/\r\n  variant?: ButtonVariant\r\n  /**  * Disables the button.*/\r\n  disabled?: boolean\r\n  /**  **Required**: Button content.*/\r\n  children: ReactNode\r\n}\r\n\r\nexport type ButtonProps<T extends ElementType = 'button'> = ButtonOwnProps<T> &\r\n  Omit<ComponentPropsWithoutRef<T>, keyof ButtonOwnProps<T>>\r\n\r\nexport const Button = <T extends ElementType = 'button'>({\r\n  as,\r\n  children,\r\n  fullWidth = false,\r\n  className,\r\n  variant = 'primary',\r\n  ...rest\r\n}: ButtonProps<T>) => {\r\n  const classNames = clsx(s.button, s[variant], fullWidth && s.fullWidth, className)\r\n  const Component = (as || 'button') as ElementType\r\n\r\n  return (\r\n    <Component className={classNames} {...rest}>\r\n      {children}\r\n    </Component>\r\n  )\r\n}\r\n","import { ReactNode } from 'react';\r\n\r\nimport { clsx } from 'clsx';\r\n\r\nimport styles from './card.module.scss';\r\n\r\ntype cardSize = 'sm' | 'md' | 'lg';\r\n\r\ntype Props = {\r\n  /**\r\n   * Controls the card's padding and font scaling.\r\n   * @default 'md'\r\n   */\r\n  size?: cardSize;\r\n  /**\r\n   * Content to render inside the card.\r\n   * Accepts strings, JSX, arrays, etc.\r\n   */\r\n  children?: ReactNode;\r\n  /**\r\n   * When `true`, forces the card to occupy 100% of its parent's width.\r\n   * @default false\r\n   */\r\n  fullWidth?: boolean;\r\n};\r\n\r\nexport const Card = ({ children, fullWidth, size = 'md' }: Props) => {\r\n  const classNames = clsx(styles.cardBody, fullWidth && styles.fullWidth);\r\n\r\n  return (\r\n    <div className={classNames} data-cardsize={size}>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n","import {ComponentPropsWithoutRef, ReactNode} from 'react'\r\n\r\nimport { CheckIcon } from '@radix-ui/react-icons'\r\nimport { Checkbox as RadixCheckbox } from 'radix-ui'\r\n\r\nimport s from './checkbox.module.scss'\r\n\r\ntype CheckboxProps = {\r\n  /** **Required**: Unique identifier for the checkbox */\r\n  idProp: string\r\n  /** Label displayed next to the checkbox */\r\n  label?: ReactNode\r\n  /** Additional class name for styling */\r\n  className?: string\r\n  /** Disables the checkbox */\r\n  disabled?: boolean\r\n  /** Controls the checked state (if controlled externally) */\r\n  checked?: boolean\r\n} & ComponentPropsWithoutRef<typeof RadixCheckbox.Root>\r\n\r\nexport const Checkbox = ({ label, idProp, className, disabled, ...props }: CheckboxProps) => (\r\n  <div style={{ display: 'flex', alignItems: 'center' }}>\r\n    <RadixCheckbox.Root\r\n      className={s.Root}\r\n      defaultChecked\r\n      id={idProp}\r\n      aria-disabled={disabled}\r\n      {...props}\r\n    >\r\n      <RadixCheckbox.Indicator className={s.Indicator} aria-disabled={disabled}>\r\n        <CheckIcon />\r\n      </RadixCheckbox.Indicator>\r\n    </RadixCheckbox.Root>\r\n    <label className={s.Label} htmlFor={idProp} aria-disabled={disabled}>\r\n      {label}\r\n    </label>\r\n  </div>\r\n)\r\n","import * as React from 'react'\r\nimport { ComponentPropsWithoutRef, ElementRef, ForwardedRef } from 'react'\r\n\r\nimport clsx from 'clsx'\r\nimport { Select } from 'radix-ui'\r\n\r\nimport s from './selectbox.module.scss'\r\n\r\ntype SelectItemProps = {\r\n  value: string\r\n  children: React.ReactNode\r\n} & ComponentPropsWithoutRef<typeof Select.Item>\r\n\r\nexport const SelectItem = React.forwardRef<ElementRef<typeof Select.Item>, SelectItemProps>(\r\n  (\r\n    { children, className, ...props }: SelectItemProps,\r\n    forwardedRef: ForwardedRef<ElementRef<typeof Select.Item>>\r\n  ): React.ReactElement => {\r\n    return (\r\n      <Select.Item className={clsx(s.Item, className)} {...props} ref={forwardedRef}>\r\n        <Select.ItemText className={s.ItemContent}>{children}</Select.ItemText>\r\n      </Select.Item>\r\n    )\r\n  }\r\n)\r\n","import {ComponentPropsWithoutRef, FC} from 'react'\r\n\r\nimport {ChevronDownIcon} from '@radix-ui/react-icons'\r\nimport {Select} from 'radix-ui'\r\n\r\nimport '../../styles/index.scss'\r\n\r\nimport s from './selectbox.module.scss'\r\n\r\nimport {SelectItem} from './SelectItem'\r\nimport {UniversalIcon} from \"../common/unversalIcon/UniversalIcon\";\r\nimport {clsx} from \"clsx\";\r\n\r\ntype LanguageType = 'rus' | 'eng'\r\n\r\ntype OptionType = {\r\n  value: LanguageType | string,\r\n  label: string,\r\n  icon?: string\r\n}\r\n\r\ntype SelectboxProps = {\r\n  /** **Required**: Unique ID for the Select. Trigger and associated label */\r\n  idProp: string\r\n  /** **Required**: Name attribute for the form (useful when submitting forms) */\r\n  name: string\r\n  /** **Required**: Array of options to choose from, each with a label (display text) and value */\r\n  options: OptionType[]\r\n  /** Placeholder text shown when no option is selected */\r\n  placeholder?: string\r\n  /** Initial value */\r\n  value?: string;\r\n  /** Label displayed above the select input */\r\n  label?: string\r\n  /** Disables the select input */\r\n  disabled?: boolean\r\n  /** Additional CSS class names for the root element */\r\n  className?: string\r\n  /** If true, the select input stretches to the full width of its container */\r\n  fullWidth?: boolean\r\n  /** Callback fired when the selected value changes */\r\n  onValueChange?: (value: string) => void\r\n  /** Callback fired when the dropdown opens or closes */\r\n  onOpenChange?: (open: boolean) => void\r\n} & Omit<ComponentPropsWithoutRef<typeof Select.Root>, 'value' | 'onValueChange' | 'children'>\r\n\r\nexport const Selectbox: FC<SelectboxProps> = ({\r\n                                                idProp,\r\n                                                name,\r\n                                                label = '',\r\n                                                placeholder = 'Select...',\r\n                                                disabled = false,\r\n                                                className,\r\n                                                value,\r\n                                                fullWidth,\r\n                                                onValueChange,\r\n                                                onOpenChange,\r\n                                                options,\r\n                                                ...rest\r\n                                              }: SelectboxProps) => {\r\n  const selectedOption: OptionType | undefined = options.find(opt => opt.value === value);\r\n\r\n  return (\r\n    <Select.Root onValueChange={onValueChange} onOpenChange={onOpenChange} {...rest}>\r\n      {label && (\r\n        <label htmlFor={idProp} className={s.Label}>\r\n          {label}\r\n        </label>\r\n      )}\r\n      <Select.Trigger\r\n        id={idProp}\r\n        className={clsx(s.Trigger, fullWidth && s.fullWidth)}\r\n        disabled={disabled}\r\n        aria-label={label}\r\n        data-label={label ? 'true' : 'false'}\r\n        name={name}\r\n      >\r\n        {selectedOption ? (\r\n          <div className={s.Selected}>\r\n            {selectedOption.icon && (\r\n              <span className={s.IconWrapper}><UniversalIcon name={selectedOption.icon}/></span>\r\n            )}\r\n            {selectedOption.label}\r\n          </div>\r\n        ) : (\r\n          <Select.Value placeholder={placeholder}/>\r\n        )}\r\n        <Select.Icon className={s.Icon}>\r\n          <ChevronDownIcon/>\r\n        </Select.Icon>\r\n      </Select.Trigger>\r\n\r\n      <Select.Portal>\r\n        <Select.Content className={s.Content} side={'bottom'} position={'popper'}>\r\n          <Select.Viewport className={s.Viewport}>\r\n            <Select.Group>\r\n              {options.map(option => (\r\n                <SelectItem className={s.Selected} key={option.value} value={option.value}>\r\n                  {option.icon && <span><UniversalIcon name={option.icon}/></span>}\r\n                  {option.label}\r\n                </SelectItem>\r\n              ))}\r\n            </Select.Group>\r\n          </Select.Viewport>\r\n        </Select.Content>\r\n      </Select.Portal>\r\n    </Select.Root>\r\n  )\r\n}\r\n","import {Selectbox} from \"../selectbox\";\r\nimport {UniversalIcon} from \"../common/unversalIcon/UniversalIcon\";\r\nimport {Button} from \"../button\";\r\n\r\nimport '../../styles/index.scss'\r\nimport s from './header.module.scss'\r\n\r\ntype Props = {\r\n  /** **Required**: Indicates if the user is authenticated */\r\n  isAuth: boolean,\r\n  /** Indicates if the user is authenticated */\r\n  isProcessingAuth?: boolean,\r\n  /** **Required**: Current selected localization value */\r\n  localization: string,\r\n  /** Optional number of notifications to display. If not provided, defaults to 0 */\r\n  notificationCount?: number,\r\n}\r\n\r\nexport const Header = ({\r\n                         isAuth,\r\n                         isProcessingAuth = false,\r\n                         localization,\r\n                         notificationCount = 0\r\n                       }: Props) => {\r\n  const convertNumber = (notificationCount: number): string => {\r\n    return notificationCount > 9 ? `9+` : `${notificationCount}`\r\n  }\r\n\r\n  return (\r\n    <header className={s.Header}>\r\n      <div>\r\n          <span className={s.Logo}>\r\n            Inctagram\r\n          </span>\r\n      </div>\r\n      <div className={s.Content}>\r\n        {isAuth && (\r\n          <div className={s.IconWrapper} data-notificationcount={convertNumber(notificationCount)}>\r\n            <UniversalIcon name={'outline-bell'}/>\r\n          </div>\r\n        )}\r\n        <Selectbox value={localization} name={'aaa'}\r\n                   options={[\r\n                     {label: 'Russian', value: 'rus', icon: 'Flag-Russia'},\r\n                     {label: 'English', value: 'eng', icon: 'Flag-United-Kingdom'}\r\n                   ]}\r\n                   idProp={localization}\r\n        />\r\n        {!isAuth && !isProcessingAuth && (\r\n          <>\r\n            <Button variant='text_button'>Sign in</Button>\r\n            <Button variant='primary'>Sign up</Button>\r\n          </>\r\n        )}\r\n      </div>\r\n    </header>\r\n  )\r\n}\r\n","import { InputHTMLAttributes, useState } from 'react'\r\n\r\nimport { clsx } from 'clsx'\r\n\r\nimport s from './input.module.scss'\r\n\r\nimport { UniversalIcon } from '@/components'\r\n\r\ntype InputVariant = 'search' | 'email' | 'password' | 'text'\r\n\r\ntype InputProps = InputHTMLAttributes<HTMLInputElement> & {\r\n  /** Defines the visual style of the input (e.g., \"search\", \"password\", \"text\"). */\r\n  inputType: InputVariant\r\n  /**  Optional label text displayed above the input field. */\r\n  label?: string\r\n  /** Error message displayed below the input when error is true. */\r\n  errorText?: string\r\n  /** \tIf true, the input spans 100% of its container width. */\r\n  fullWidth?: boolean\r\n}\r\n\r\nexport const Input = ({\r\n  id,\r\n  label,\r\n  inputType,\r\n  errorText,\r\n  disabled = false,\r\n  fullWidth = false,\r\n  required,\r\n  ...rest\r\n}: InputProps) => {\r\n  const [showPassword, setShowPassword] = useState(false)\r\n\r\n  const containerClassNames = clsx(s.inputContainer, errorText && s.error, fullWidth && s.fullWidth)\r\n\r\n  const isPassword = inputType === 'password'\r\n  const isSearch = inputType === 'search'\r\n\r\n  const currentInputType = (variants: InputVariant) => {\r\n    if (isPassword) {\r\n      return showPassword ? 'text' : 'password'\r\n    } else {\r\n      return variants\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={s.wrapper}>\r\n      {label && (\r\n        <label\r\n          data-requiredfield={required}\r\n          htmlFor={id}\r\n          className={s.label}\r\n          data-disabled={disabled}\r\n        >\r\n          {label}\r\n        </label>\r\n      )}\r\n      <div className={containerClassNames} data-disabled={disabled}>\r\n        {isSearch && (\r\n          <button type={'submit'} className={s.iconButton} data-disabled={disabled}>\r\n            <UniversalIcon name={'search'} />\r\n          </button>\r\n        )}\r\n        <input\r\n          id={id}\r\n          type={currentInputType(inputType)}\r\n          required={required}\r\n          className={s.input}\r\n          autoComplete={'off'}\r\n          {...rest}\r\n        />\r\n\r\n        {isPassword && (\r\n          <button\r\n            type={'button'}\r\n            className={s.iconButton}\r\n            onClick={() => setShowPassword(!showPassword)}\r\n          >\r\n            {showPassword ? (\r\n              <UniversalIcon name={'eye-outline'} />\r\n            ) : (\r\n              <UniversalIcon name={'eye-off-outline'} />\r\n            )}\r\n          </button>\r\n        )}\r\n      </div>\r\n\r\n      {errorText && <div className={s.errorText}>{errorText}</div>}\r\n    </div>\r\n  )\r\n}\r\n","import { ComponentProps, InputHTMLAttributes, ReactElement } from 'react'\r\n\r\nimport { RadioGroup } from 'radix-ui'\r\n\r\nimport styles from './radio.module.scss'\r\n\r\nexport type RadioOptionsType = {\r\n  id: string\r\n  radioName: string\r\n}\r\n\r\ntype Props = ComponentProps<typeof RadioGroup.Root> &\r\n  InputHTMLAttributes<HTMLInputElement> & {\r\n    /** **Required**:Array of radio button options*/\r\n    options: RadioOptionsType[]\r\n    /** Disables all radio buttons */\r\n    selectedOption?: string\r\n  }\r\n\r\nexport const Radio = ({ options, defaultValue, disabled, ...rest }: Props): ReactElement => (\r\n  <RadioGroup.Root\r\n    className={styles.Root}\r\n    defaultValue={'default'}\r\n    aria-label={'View density'}\r\n    {...rest}\r\n  >\r\n    {options?.length &&\r\n      options.map(option => (\r\n        <div\r\n          className={disabled ? styles.disabled : ''}\r\n          style={{ display: 'flex', alignItems: 'center' }}\r\n          key={option.id}\r\n        >\r\n          <RadioGroup.Item className={styles.Item} value={option.radioName} id={option.id}>\r\n            <RadioGroup.Indicator className={styles.Indicator} />\r\n          </RadioGroup.Item>\r\n          <label className={styles.Label} htmlFor={option.id}>\r\n            {option.radioName}\r\n          </label>\r\n        </div>\r\n      ))}\r\n  </RadioGroup.Root>\r\n)\r\n","import { ReactElement } from 'react'\r\nimport ReCAPTCHA from 'react-google-recaptcha'\r\n\r\nimport { clsx } from 'clsx'\r\n\r\nimport styles from './ReCaptcha.module.scss'\r\n\r\ntype Props = {\r\n  /** **Required**: Tracks if captcha verification was completed successfully */\r\n  isCaptchaPassed: boolean\r\n  /** **Required**: Callback that receives the verification token string */\r\n  setCaptchaToken: (token: string) => void\r\n  siteKey: string\r\n}\r\n\r\n/**\r\n * ReCaptcha component that integrates Google reCAPTCHA v2\r\n * @component\r\n * @param {Object} props - Component props\r\n * @param {boolean} props.isCaptchaPassed - Flag indicating if captcha was successfully passed\r\n * @param {function(string): void} props.setCaptchaToken - Callback function to set the captcha token\r\n * @returns {JSX.Element} - Rendered reCAPTCHA component\r\n *\r\n * @example\r\n * // Basic usage\r\n * <ReCaptcha\r\n *   isCaptchaPassed={isVerified}\r\n *   setCaptchaToken={(token) => setToken(token)}\r\n * />\r\n */\r\n\r\nexport const ReCaptcha = ({ isCaptchaPassed, setCaptchaToken, siteKey, ...rest }: Props): ReactElement => {\r\n  const submitHandler = (token: string | null) => {\r\n    if (isCaptchaPassed && token) {\r\n      setCaptchaToken(token)\r\n    }\r\n  }\r\n\r\n  const classNames = clsx(styles.reCaptchaWrapper, !isCaptchaPassed && styles.reCaptchaError)\r\n\r\n  return (\r\n    <div className={classNames}>\r\n      <ReCAPTCHA\r\n        sitekey={siteKey}\r\n        onChange={submitHandler}\r\n        theme={'dark'}\r\n        {...rest}\r\n      />\r\n      {!isCaptchaPassed && (\r\n        <span className={styles.reCaptchaText}>Please verify that you are not a robot</span>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n","import { ComponentPropsWithoutRef, ElementType } from 'react'\r\n\r\nimport { clsx } from 'clsx'\r\n\r\nimport s from './textArea.module.scss'\r\n\r\nexport const textAreaVariant = ['default']\r\n\r\nexport type TextAreaVariant = (typeof textAreaVariant)[number]\r\n\r\nexport type TextAreaProps<T extends ElementType = 'textarea'> = {\r\n  /**\r\n   * Custom component or HTML element to render instead of the default 'textarea'.\r\n   * Useful for styling or using a wrapper component.\r\n   */\r\n  as?: T\r\n  /**\r\n   * Visual style variant for the TextArea (e.g. 'default', etc.).\r\n   */\r\n  variant?: TextAreaVariant\r\n  /**\r\n   * Label text displayed above the TextArea.\r\n   */\r\n  label?: string\r\n  /**\r\n   * If true, displays the component in an error state.\r\n   */\r\n  error?: boolean\r\n  /**\r\n   * Error message shown below the TextArea when `error` is true.\r\n   */\r\n  errorText?: string\r\n  /**\r\n   * If true, makes the TextArea take up the full width of its container.\r\n   */\r\n  fullWidth?: boolean\r\n  /**\r\n   * **Required**: ID for Text area.\r\n   */\r\n  id: string\r\n  asChild?: boolean\r\n} & ComponentPropsWithoutRef<T>\r\n\r\nexport const TextAreaComponent = <T extends ElementType = 'textarea'>(props: TextAreaProps<T>) => {\r\n  const {\r\n    className,\r\n    variant = 'default',\r\n    label,\r\n    error,\r\n    errorText,\r\n    disabled = false,\r\n    fullWidth = false,\r\n    id,\r\n    ...rest\r\n  } = props\r\n\r\n  const classNames = clsx(\r\n    s.textArea,\r\n    error ? s.error : s[variant],\r\n    disabled && s.disabled,\r\n    fullWidth && s.fullWidth,\r\n    className\r\n  )\r\n\r\n  return (\r\n    <div className={s.bodyTextArea}>\r\n      {label && (\r\n        <label className={s.label} htmlFor={id}>\r\n          {label}\r\n        </label>\r\n      )}\r\n      <textarea className={classNames} disabled={disabled} id={id} {...rest} />\r\n      {error && errorText && <div className={s.errorText}>{errorText}</div>}\r\n    </div>\r\n  )\r\n}\r\n"],"names":["UniversalIcon","name","dataStatic","width","height","svgElement","setSvgElement","React","res","svgString","options","domNode","el","attribs","jsx","parsed","parse","Alert","children","variant","onClose","closable","fullWidth","rest","classNames","clsx","s","jsxs","buttonVariant","Button","as","className","Component","Card","size","styles","Checkbox","label","idProp","disabled","props","RadixCheckbox","CheckIcon","SelectItem","forwardedRef","Select","Selectbox","placeholder","value","onValueChange","onOpenChange","selectedOption","opt","ChevronDownIcon","option","Header","isAuth","isProcessingAuth","localization","notificationCount","convertNumber","Fragment","Input","id","inputType","errorText","required","showPassword","setShowPassword","useState","containerClassNames","isPassword","isSearch","currentInputType","variants","Radio","defaultValue","RadioGroup","ReCaptcha","isCaptchaPassed","setCaptchaToken","siteKey","submitHandler","token","ReCAPTCHA","textAreaVariant","TextAreaComponent","error"],"mappings":"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"}