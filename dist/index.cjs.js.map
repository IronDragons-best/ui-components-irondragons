{"version":3,"file":"index.cjs.js","sources":["../src/components/common/unversalIcon/UniversalIcon.tsx","../src/components/alerts/Alerts.tsx","../src/components/button/Button.tsx","../src/components/card/Card.tsx","../src/components/checkbox/Checkbox.tsx","../src/components/selectbox/SelectItem.tsx","../src/components/selectbox/Selectbox.tsx","../src/components/header/Header.tsx","../src/components/input/Input.tsx","../src/components/radio/Radio.tsx","../src/components/reCaptcha/ReCaptcha.tsx","../src/components/textArea/TextArea.tsx","../src/components/pagination/paginationTypes.ts","../src/components/pagination/buttonsGroup/PrevButton.tsx","../src/components/pagination/buttonsGroup/NextButton.tsx","../src/components/pagination/buttonsGroup/PageButton.tsx","../src/components/pagination/buttonsGroup/Dots.tsx","../src/components/pagination/buttonsGroup/MainPaginationButtons.tsx","../src/components/pagination/usePagination.ts","../src/components/pagination/PerPageSelect.tsx","../src/components/pagination/Pagination.tsx"],"sourcesContent":["import React from 'react'\r\n\r\nimport parse, {domToReact, HTMLReactParserOptions, Element, DOMNode} from 'html-react-parser'\r\n\r\ntype Props = {\r\n    name: string,\r\n    dataStatic?: boolean,\r\n    width?: string,\r\n    height?: string,\r\n    size?: number\r\n    className?: string\r\n}\r\n\r\nexport const UniversalIcon = ({\r\n                                  name,\r\n                                  dataStatic = false,\r\n                                  width = '24px',\r\n                                  height = '24px',\r\n                                  size,\r\n                                  className,\r\n                                  ...rest\r\n                              }: Props) => {\r\n    const [svgElement, setSvgElement] = React.useState<React.ReactNode>(null)\r\n\r\n    React.useEffect(() => {\r\n        fetch(`/assets/icons/${name}.svg`)\r\n            .then(res => res.text())\r\n            .then(svgString => {\r\n                const options: HTMLReactParserOptions = {\r\n                    replace: (domNode) => {\r\n                        if (domNode.type === 'tag' && (domNode as Element).name === 'svg') {\r\n                            const el = domNode as Element;\r\n\r\n                            const attribs = {\r\n                                ...el.attribs,\r\n                                ...(dataStatic ? {'data-static': 'true'} : {'data-static': 'false'}),\r\n                                width: width,\r\n                                height: height,\r\n                                size: size,\r\n                                className: className,\r\n                                ...rest\r\n                            };\r\n                            return (\r\n                                <svg {...attribs}>\r\n                                    {domToReact(el.children as DOMNode[], options)}\r\n                                </svg>\r\n                            );\r\n                        }\r\n                    },\r\n                };\r\n\r\n                const parsed = parse(svgString, options)\r\n                setSvgElement(parsed)\r\n            })\r\n    }, [name, dataStatic])\r\n\r\n    return svgElement\r\n}\r\n","import { ComponentProps, FC, ReactNode } from 'react'\r\n\r\nimport { clsx } from 'clsx'\r\n\r\nimport s from './alerts.module.scss'\r\n\r\nimport { UniversalIcon } from '../common/unversalIcon/UniversalIcon'\r\n\r\nexport type AlertProps = {\r\n  /**\r\n   * **Required**: The content of the alert (usually text or elements).\r\n   */\r\n  children: ReactNode\r\n  /**\r\n   * Visual variant of the alert. Can be 'success' (green) or 'error' (red).\r\n   * Defaults to no variant styling.\r\n   */\r\n  variant?: 'success' | 'error'\r\n  /**\r\n   * Callback fired when the close button is clicked.\r\n   */\r\n  onClose?: () => void\r\n  /**\r\n   * **Required**: If true, the alert can be closed via a close button.\r\n   */\r\n  closable: boolean\r\n  /**\r\n   * If true, the alert stretches to the full width of its container.\r\n   */\r\n  fullWidth?: boolean\r\n} & ComponentProps<'div'>\r\n\r\nexport const Alert: FC<AlertProps> = ({\r\n  children,\r\n  variant = 'success',\r\n  onClose,\r\n  closable = true,\r\n  fullWidth = false,\r\n  ...rest\r\n}) => {\r\n  const classNames = {\r\n    box: clsx(s.box, variant === 'success' ? s.success : s.error, fullWidth && s.fullWidth),\r\n    content: s.content,\r\n    icon: clsx(s.icon),\r\n  }\r\n\r\n  return (\r\n    <div className={classNames.box} {...rest}>\r\n      <div className={classNames.content}>\r\n        {variant === 'error' ? (\r\n          <div>\r\n            <strong>Error!</strong> {children}\r\n          </div>\r\n        ) : (\r\n          <>{children}</>\r\n        )}\r\n        {closable && (\r\n          <span className={classNames.icon} onClick={onClose}>\r\n            <UniversalIcon name={'close'} />\r\n          </span>\r\n        )}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import { ComponentPropsWithoutRef, ElementType, ReactNode } from 'react'\r\n\r\nimport { clsx } from 'clsx'\r\n\r\nimport s from './button.module.scss'\r\n\r\nexport const buttonVariant = ['primary', 'secondary', 'outline', 'text_button'] as const\r\nexport type ButtonVariant = (typeof buttonVariant)[number]\r\n\r\nexport type ButtonOwnProps<T extends ElementType = 'button'> = {\r\n  /**  * The element or component to render as. For example, 'button', 'a' etc. Default = 'button */\r\n  as?: T\r\n  /**  * Makes the button take up the full width of its container. */\r\n  fullWidth?: boolean\r\n  /**  * Visual style variant of the button.*/\r\n  variant?: ButtonVariant\r\n  /**  * Disables the button.*/\r\n  disabled?: boolean\r\n  /**  **Required**: Button content.*/\r\n  children: ReactNode\r\n}\r\n\r\nexport type ButtonProps<T extends ElementType = 'button'> = ButtonOwnProps<T> &\r\n  Omit<ComponentPropsWithoutRef<T>, keyof ButtonOwnProps<T>>\r\n\r\nexport const Button = <T extends ElementType = 'button'>({\r\n  as,\r\n  children,\r\n  fullWidth = false,\r\n  className,\r\n  variant = 'primary',\r\n  ...rest\r\n}: ButtonProps<T>) => {\r\n  const classNames = clsx(s.button, s[variant], fullWidth && s.fullWidth, className)\r\n  const Component = (as || 'button') as ElementType\r\n\r\n  return (\r\n    <Component className={classNames} {...rest}>\r\n      {children}\r\n    </Component>\r\n  )\r\n}\r\n","import { ReactNode } from 'react';\r\n\r\nimport { clsx } from 'clsx';\r\n\r\nimport styles from './card.module.scss';\r\n\r\ntype cardSize = 'sm' | 'md' | 'lg';\r\n\r\ntype Props = {\r\n  /**\r\n   * Controls the card's padding and font scaling.\r\n   * @default 'md'\r\n   */\r\n  size?: cardSize;\r\n  /**\r\n   * Content to render inside the card.\r\n   * Accepts strings, JSX, arrays, etc.\r\n   */\r\n  children?: ReactNode;\r\n  /**\r\n   * When `true`, forces the card to occupy 100% of its parent's width.\r\n   * @default false\r\n   */\r\n  fullWidth?: boolean;\r\n};\r\n\r\nexport const Card = ({ children, fullWidth, size = 'md' }: Props) => {\r\n  const classNames = clsx(styles.cardBody, fullWidth && styles.fullWidth);\r\n\r\n  return (\r\n    <div className={classNames} data-cardsize={size}>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n","import {ComponentPropsWithoutRef, ReactNode} from 'react'\r\n\r\nimport { CheckIcon } from '@radix-ui/react-icons'\r\nimport { Checkbox as RadixCheckbox } from 'radix-ui'\r\n\r\nimport s from './checkbox.module.scss'\r\n\r\ntype CheckboxProps = {\r\n  /** **Required**: Unique identifier for the checkbox */\r\n  idProp: string\r\n  /** Label displayed next to the checkbox */\r\n  label?: ReactNode\r\n  /** Additional class name for styling */\r\n  className?: string\r\n  /** Disables the checkbox */\r\n  disabled?: boolean\r\n  /** Controls the checked state (if controlled externally) */\r\n  checked?: boolean\r\n} & ComponentPropsWithoutRef<typeof RadixCheckbox.Root>\r\n\r\nexport const Checkbox = ({ label, idProp, className, disabled, ...props }: CheckboxProps) => (\r\n  <div style={{ display: 'flex', alignItems: 'center' }}>\r\n    <RadixCheckbox.Root\r\n      className={s.Root}\r\n      defaultChecked\r\n      id={idProp}\r\n      aria-disabled={disabled}\r\n      {...props}\r\n    >\r\n      <RadixCheckbox.Indicator className={s.Indicator} aria-disabled={disabled}>\r\n        <CheckIcon />\r\n      </RadixCheckbox.Indicator>\r\n    </RadixCheckbox.Root>\r\n    <label className={s.Label} htmlFor={idProp} aria-disabled={disabled}>\r\n      {label}\r\n    </label>\r\n  </div>\r\n)\r\n","import * as React from 'react'\r\nimport { ComponentPropsWithoutRef, ElementRef, ForwardedRef } from 'react'\r\n\r\nimport clsx from 'clsx'\r\nimport { Select } from 'radix-ui'\r\n\r\nimport s from './selectbox.module.scss'\r\n\r\ntype SelectItemProps = {\r\n  value: string\r\n  variant?: 'default' | 'pagination'\r\n  children: React.ReactNode\r\n} & ComponentPropsWithoutRef<typeof Select.Item>\r\n\r\nexport const SelectItem = React.forwardRef<ElementRef<typeof Select.Item>, SelectItemProps>(\r\n  (\r\n    { children, variant, className, ...props }: SelectItemProps,\r\n    forwardedRef: ForwardedRef<ElementRef<typeof Select.Item>>\r\n  ): React.ReactElement => {\r\n    return (\r\n      <Select.Item className={clsx(s[`${variant}`], s.Item, className)} {...props} ref={forwardedRef}>\r\n        <Select.ItemText className={s.ItemContent}>{children}</Select.ItemText>\r\n      </Select.Item>\r\n    )\r\n  }\r\n)\r\n","import {ComponentPropsWithoutRef, FC} from 'react'\r\n\r\nimport {ChevronDownIcon} from '@radix-ui/react-icons'\r\nimport {Select} from 'radix-ui'\r\n\r\nimport '../../styles/index.scss'\r\n\r\nimport s from './selectbox.module.scss'\r\n\r\nimport {SelectItem} from './SelectItem'\r\nimport {UniversalIcon} from \"../common/unversalIcon/UniversalIcon\";\r\nimport {clsx} from \"clsx\";\r\n\r\ntype LanguageType = 'rus' | 'eng'\r\n\r\ntype OptionType = {\r\n  value: LanguageType | string | number,\r\n  label: string,\r\n  icon?: string\r\n}\r\n\r\ntype SelectboxProps = {\r\n  /** **Required**: Unique ID for the Select. Trigger and associated label */\r\n  idProp?: string\r\n  /** **Required**: Name attribute for the form (useful when submitting forms) */\r\n  name?: string\r\n  /** **Required**: Array of options to choose from, each with a label (display text) and value */\r\n  options: OptionType[]\r\n  /** Placeholder text shown when no option is selected */\r\n  placeholder?: string\r\n  /** Initial value */\r\n  value?: string | number;\r\n  variant?: 'default' | 'pagination';\r\n  /** Label displayed above the select input */\r\n  label?: string\r\n  /** Disables the select input */\r\n  disabled?: boolean\r\n  /** Additional CSS class names for the root element */\r\n  className?: string\r\n  /** If true, the select input stretches to the full width of its container */\r\n  fullWidth?: boolean\r\n  /** Callback fired when the selected value changes */\r\n  onValueChange?: (value: string) => void\r\n  /** Callback fired when the dropdown opens or closes */\r\n  onOpenChange?: (open: boolean) => void\r\n} & Omit<ComponentPropsWithoutRef<typeof Select.Root>, 'value' | 'onValueChange' | 'children'>\r\n\r\nexport const Selectbox: FC<SelectboxProps> = ({\r\n                                                idProp,\r\n                                                name,\r\n                                                label = '',\r\n                                                placeholder = 'Select...',\r\n                                                disabled = false,\r\n                                                className,\r\n                                                value,\r\n                                                fullWidth,\r\n                                                onValueChange,\r\n                                                onOpenChange,\r\n                                                options,\r\n                                                variant = 'default',\r\n                                                ...rest\r\n                                              }: SelectboxProps) => {\r\n  const selectedOption: OptionType | undefined = options.find(opt => opt.value === value);\r\n\r\n  return (\r\n    <Select.Root onValueChange={onValueChange} onOpenChange={onOpenChange} {...rest}>\r\n      {label && (\r\n        <label htmlFor={idProp} className={s.Label}>\r\n          {label}\r\n        </label>\r\n      )}\r\n      <Select.Trigger\r\n        id={idProp}\r\n        className={clsx(s[`${variant}`], s.Trigger, fullWidth && s.fullWidth)}\r\n        disabled={disabled}\r\n        aria-label={label}\r\n        data-label={label ? 'true' : 'false'}\r\n        name={name}\r\n      >\r\n        {selectedOption ? (\r\n          <div className={s.Selected}>\r\n            {selectedOption.icon && (\r\n              <span className={s.IconWrapper}><UniversalIcon name={selectedOption.icon} /></span>\r\n            )}\r\n            {selectedOption.label}\r\n          </div>\r\n        ) : (\r\n          <Select.Value placeholder={placeholder}/>\r\n        )}\r\n        <Select.Icon className={s.Icon}>\r\n          <ChevronDownIcon/>\r\n        </Select.Icon>\r\n      </Select.Trigger>\r\n\r\n      <Select.Portal>\r\n        <Select.Content className={clsx(s[`${variant}`], s.Content)} side={'bottom'} position={'popper'}>\r\n          <Select.Viewport className={s.Viewport}>\r\n            <Select.Group>\r\n              {options.map(option => (\r\n                <SelectItem className={s.Selected} key={option.value} variant={variant} value={option.value.toString()}>\r\n                  {option.icon && <span><UniversalIcon name={option.icon}/></span>}\r\n                  {option.label}\r\n                </SelectItem>\r\n              ))}\r\n            </Select.Group>\r\n          </Select.Viewport>\r\n        </Select.Content>\r\n      </Select.Portal>\r\n    </Select.Root>\r\n  )\r\n}\r\n","import {Selectbox} from \"../selectbox\";\r\nimport {UniversalIcon} from \"../common/unversalIcon/UniversalIcon\";\r\nimport {Button} from \"../button\";\r\n\r\nimport '../../styles/index.scss'\r\nimport s from './header.module.scss'\r\n\r\ntype Props = {\r\n  /** **Required**: Indicates if the user is authenticated */\r\n  isAuth: boolean,\r\n  /** Indicates if the user is authenticated */\r\n  isProcessingAuth?: boolean,\r\n  /** **Required**: Current selected localization value */\r\n  localization: string,\r\n  /** Optional number of notifications to display. If not provided, defaults to 0 */\r\n  notificationCount?: number,\r\n}\r\n\r\nexport const Header = ({\r\n                         isAuth,\r\n                         isProcessingAuth = false,\r\n                         localization,\r\n                         notificationCount = 0\r\n                       }: Props) => {\r\n  const convertNumber = (notificationCount: number): string => {\r\n    return notificationCount > 9 ? `9+` : `${notificationCount}`\r\n  }\r\n\r\n  return (\r\n    <header className={s.Header}>\r\n      <div>\r\n          <span className={s.Logo}>\r\n            Inctagram\r\n          </span>\r\n      </div>\r\n      <div className={s.Content}>\r\n        {isAuth && (\r\n          <div className={s.IconWrapper} data-notificationcount={convertNumber(notificationCount)}>\r\n            <UniversalIcon name={'outline-bell'}/>\r\n          </div>\r\n        )}\r\n        <Selectbox value={localization} name={'aaa'}\r\n                   options={[\r\n                     {label: 'Russian', value: 'rus', icon: 'Flag-Russia'},\r\n                     {label: 'English', value: 'eng', icon: 'Flag-United-Kingdom'}\r\n                   ]}\r\n                   idProp={localization}\r\n        />\r\n        {!isAuth && !isProcessingAuth && (\r\n          <>\r\n            <Button variant='text_button'>Sign in</Button>\r\n            <Button variant='primary'>Sign up</Button>\r\n          </>\r\n        )}\r\n      </div>\r\n    </header>\r\n  )\r\n}\r\n","import { InputHTMLAttributes, useState } from 'react'\r\n\r\nimport { clsx } from 'clsx'\r\n\r\nimport s from './input.module.scss'\r\n\r\nimport { UniversalIcon } from '@/components'\r\n\r\ntype InputVariant = 'search' | 'email' | 'password' | 'text'\r\n\r\ntype InputProps = InputHTMLAttributes<HTMLInputElement> & {\r\n  /** Defines the visual style of the input (e.g., \"search\", \"password\", \"text\"). */\r\n  inputType: InputVariant\r\n  /**  Optional label text displayed above the input field. */\r\n  label?: string\r\n  /** Error message displayed below the input when error is true. */\r\n  errorText?: string\r\n  /** \tIf true, the input spans 100% of its container width. */\r\n  fullWidth?: boolean\r\n}\r\n\r\nexport const Input = ({\r\n  id,\r\n  label,\r\n  inputType,\r\n  errorText,\r\n  disabled = false,\r\n  fullWidth = false,\r\n  required,\r\n  ...rest\r\n}: InputProps) => {\r\n  const [showPassword, setShowPassword] = useState(false)\r\n\r\n  const containerClassNames = clsx(s.inputContainer, errorText && s.error, fullWidth && s.fullWidth)\r\n\r\n  const isPassword = inputType === 'password'\r\n  const isSearch = inputType === 'search'\r\n\r\n  const currentInputType = (variants: InputVariant) => {\r\n    if (isPassword) {\r\n      return showPassword ? 'text' : 'password'\r\n    } else {\r\n      return variants\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={s.wrapper}>\r\n      {label && (\r\n        <label\r\n          data-requiredfield={required}\r\n          htmlFor={id}\r\n          className={s.label}\r\n          data-disabled={disabled}\r\n        >\r\n          {label}\r\n        </label>\r\n      )}\r\n      <div className={containerClassNames} data-disabled={disabled}>\r\n        {isSearch && (\r\n          <button type={'submit'} className={s.iconButton} data-disabled={disabled}>\r\n            <UniversalIcon name={'google'}/>\r\n          </button>\r\n        )}\r\n        <input\r\n          id={id}\r\n          type={currentInputType(inputType)}\r\n          required={required}\r\n          className={s.input}\r\n          autoComplete={'off'}\r\n          {...rest}\r\n        />\r\n\r\n        {isPassword && (\r\n          <button\r\n            type={'button'}\r\n            className={s.iconButton}\r\n            onClick={() => setShowPassword(!showPassword)}\r\n          >\r\n            {showPassword ? (\r\n              <UniversalIcon name={'eye-outline'} />\r\n            ) : (\r\n              <UniversalIcon name={'eye-off-outline'} />\r\n            )}\r\n          </button>\r\n        )}\r\n      </div>\r\n\r\n      {errorText && <div className={s.errorText}>{errorText}</div>}\r\n    </div>\r\n  )\r\n}\r\n","import { ComponentProps, InputHTMLAttributes, ReactElement } from 'react'\r\n\r\nimport { RadioGroup } from 'radix-ui'\r\n\r\nimport styles from './radio.module.scss'\r\n\r\nexport type RadioOptionsType = {\r\n  id: string\r\n  radioName: string\r\n}\r\n\r\ntype Props = ComponentProps<typeof RadioGroup.Root> &\r\n  InputHTMLAttributes<HTMLInputElement> & {\r\n    /** **Required**:Array of radio button options*/\r\n    options: RadioOptionsType[]\r\n    /** Disables all radio buttons */\r\n    selectedOption?: string\r\n  }\r\n\r\nexport const Radio = ({ options, defaultValue, disabled, ...rest }: Props): ReactElement => (\r\n  <RadioGroup.Root\r\n    className={styles.Root}\r\n    defaultValue={'default'}\r\n    aria-label={'View density'}\r\n    {...rest}\r\n  >\r\n    {options?.length &&\r\n      options.map(option => (\r\n        <div\r\n          className={disabled ? styles.disabled : ''}\r\n          style={{ display: 'flex', alignItems: 'center' }}\r\n          key={option.id}\r\n        >\r\n          <RadioGroup.Item className={styles.Item} value={option.radioName} id={option.id}>\r\n            <RadioGroup.Indicator className={styles.Indicator} />\r\n          </RadioGroup.Item>\r\n          <label className={styles.Label} htmlFor={option.id}>\r\n            {option.radioName}\r\n          </label>\r\n        </div>\r\n      ))}\r\n  </RadioGroup.Root>\r\n)\r\n","import { ReactElement } from 'react'\r\nimport ReCAPTCHA from 'react-google-recaptcha'\r\n\r\nimport { clsx } from 'clsx'\r\n\r\nimport styles from './ReCaptcha.module.scss'\r\n\r\ntype Props = {\r\n  /** **Required**: Tracks if captcha verification was completed successfully */\r\n  isCaptchaPassed: boolean\r\n  /** **Required**: Callback that receives the verification token string */\r\n  setCaptchaToken: (token: string) => void\r\n  siteKey: string\r\n}\r\n\r\n/**\r\n * ReCaptcha component that integrates Google reCAPTCHA v2\r\n * @component\r\n * @param {Object} props - Component props\r\n * @param {boolean} props.isCaptchaPassed - Flag indicating if captcha was successfully passed\r\n * @param {function(string): void} props.setCaptchaToken - Callback function to set the captcha token\r\n * @returns {JSX.Element} - Rendered reCAPTCHA component\r\n *\r\n * @example\r\n * // Basic usage\r\n * <ReCaptcha\r\n *   isCaptchaPassed={isVerified}\r\n *   setCaptchaToken={(token) => setToken(token)}\r\n * />\r\n */\r\n\r\nexport const ReCaptcha = ({ isCaptchaPassed, setCaptchaToken, siteKey, ...rest }: Props): ReactElement => {\r\n  const submitHandler = (token: string | null) => {\r\n    if (isCaptchaPassed && token) {\r\n      setCaptchaToken(token)\r\n    }\r\n  }\r\n\r\n  const classNames = clsx(styles.reCaptchaWrapper, !isCaptchaPassed && styles.reCaptchaError)\r\n\r\n  return (\r\n    <div className={classNames}>\r\n      <ReCAPTCHA\r\n        sitekey={siteKey}\r\n        onChange={submitHandler}\r\n        theme={'dark'}\r\n        {...rest}\r\n      />\r\n      {!isCaptchaPassed && (\r\n        <span className={styles.reCaptchaText}>Please verify that you are not a robot</span>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n","import { ComponentPropsWithoutRef, ElementType } from 'react'\r\n\r\nimport { clsx } from 'clsx'\r\n\r\nimport s from './textArea.module.scss'\r\n\r\nexport const textAreaVariant = ['default']\r\n\r\nexport type TextAreaVariant = (typeof textAreaVariant)[number]\r\n\r\nexport type TextAreaProps<T extends ElementType = 'textarea'> = {\r\n  /**\r\n   * Custom component or HTML element to render instead of the default 'textarea'.\r\n   * Useful for styling or using a wrapper component.\r\n   */\r\n  as?: T\r\n  /**\r\n   * Visual style variant for the TextArea (e.g. 'default', etc.).\r\n   */\r\n  variant?: TextAreaVariant\r\n  /**\r\n   * Label text displayed above the TextArea.\r\n   */\r\n  label?: string\r\n  /**\r\n   * If true, displays the component in an error state.\r\n   */\r\n  error?: boolean\r\n  /**\r\n   * Error message shown below the TextArea when `error` is true.\r\n   */\r\n  errorText?: string\r\n  /**\r\n   * If true, makes the TextArea take up the full width of its container.\r\n   */\r\n  fullWidth?: boolean\r\n  /**\r\n   * **Required**: ID for Text area.\r\n   */\r\n  id: string\r\n  asChild?: boolean\r\n} & ComponentPropsWithoutRef<T>\r\n\r\nexport const TextAreaComponent = <T extends ElementType = 'textarea'>(props: TextAreaProps<T>) => {\r\n  const {\r\n    className,\r\n    variant = 'default',\r\n    label,\r\n    error,\r\n    errorText,\r\n    disabled = false,\r\n    fullWidth = false,\r\n    id,\r\n    ...rest\r\n  } = props\r\n\r\n  const classNames = clsx(\r\n    s.textArea,\r\n    error ? s.error : s[variant],\r\n    disabled && s.disabled,\r\n    fullWidth && s.fullWidth,\r\n    className\r\n  )\r\n\r\n  return (\r\n    <div className={s.bodyTextArea}>\r\n      {label && (\r\n        <label className={s.label} htmlFor={id}>\r\n          {label}\r\n        </label>\r\n      )}\r\n      <textarea className={classNames} disabled={disabled} id={id} {...rest} />\r\n      {error && errorText && <div className={s.errorText}>{errorText}</div>}\r\n    </div>\r\n  )\r\n}\r\n","import {clsx} from \"clsx\";\r\nimport s from './pagination.module.scss'\r\n\r\ntype PaginationConditionals =\r\n    | {\r\n    onPerPageChange: (itemPerPage: number) => void\r\n    perPage: number\r\n    perPageOptions: number[]\r\n}\r\n    | {\r\n    onPerPageChange?: never\r\n    perPage?: null\r\n    perPageOptions?: never\r\n}\r\n\r\nexport type PaginationProps = {\r\n    count: number\r\n    onChange: (page: number) => void\r\n    onPerPageChange?: (itemPerPage: number) => void\r\n    page: number\r\n    perPage?: number\r\n    perPageOptions?: number[]\r\n    siblings?: number\r\n} & PaginationConditionals\r\n\r\nexport const classNames = {\r\n    container: s.container,\r\n    dots: s.dots,\r\n    icon: s.icon,\r\n    item: s.item,\r\n    pageButton(selected?: boolean) {\r\n        return clsx(this.item, selected && s.selected)\r\n    },\r\n    root: s.root,\r\n    select: s.select,\r\n    selectBox: s.selectBox,\r\n}\r\n\r\nexport type MainPaginationButtonsProps = {\r\n    currentPage: number\r\n    onClick: (pageNumber: number) => () => void\r\n    paginationRange: (number | string)[]\r\n}\r\n\r\nexport type NavigationButtonProps = {\r\n    disabled?: boolean\r\n    onClick: () => void\r\n    size?: number\r\n}\r\n\r\nexport type PageButtonProps = NavigationButtonProps & {\r\n    page: number\r\n    selected: boolean\r\n}\r\n\r\nexport type PerPageSelectProps = {\r\n    onPerPageChange: (itemPerPage: number) => void\r\n    perPage: number\r\n    perPageOptions: number[]\r\n}","import {FC} from \"react\";\r\nimport {UniversalIcon} from \"@/components\";\r\nimport {classNames, NavigationButtonProps} from \"@/components/pagination/paginationTypes\";\r\n\r\nexport const  PrevButton: FC<NavigationButtonProps> = ({disabled, onClick, size}) => {\r\n    return(\r\n        <button className={classNames.item} disabled={disabled} onClick={onClick}>\r\n            <UniversalIcon className={classNames.icon} name={'arrow-ios-back'} size={size}/>\r\n        </button>\r\n    )\r\n}","import {FC} from \"react\";\r\nimport {UniversalIcon} from \"@/components\";\r\nimport {classNames, NavigationButtonProps} from \"@/components/pagination/paginationTypes\";\r\n\r\nexport const NextButton:FC<NavigationButtonProps>= ({disabled, onClick, size}) => {\r\n    return (\r\n        <button className={classNames.item} disabled={disabled} onClick={onClick}>\r\n            <UniversalIcon className={classNames.icon} name={\"arrow-ios-forward\"} size={size}/>\r\n        </button>\r\n    )\r\n}","import {FC} from \"react\";\r\nimport {classNames, PageButtonProps} from \"@/components/pagination/paginationTypes\";\r\n\r\nexport const PageButton: FC<PageButtonProps> = ({disabled, onClick, page, selected}) => {\r\n    return (\r\n        <button className={\r\n                classNames.pageButton(selected)}\r\n                disabled={selected || disabled}\r\n                onClick={onClick}\r\n                type={\"button\"}\r\n        >\r\n            {page}\r\n        </button>\r\n    )\r\n};","import {FC} from \"react\";\r\nimport {classNames} from \"@/components/pagination/paginationTypes\";\r\n\r\nexport const Dots: FC = () => {\r\n    return (\r\n        <span className={classNames.dots}>&#8230;</span>\r\n    )\r\n}","import {FC} from \"react\";\r\nimport {MainPaginationButtonsProps} from \"@/components/pagination/paginationTypes\";\r\nimport {PageButton} from \"@/components/pagination/buttonsGroup/PageButton\";\r\nimport {Dots} from \"@/components/pagination/buttonsGroup/Dots\";\r\n\r\nexport const MainPaginationButtons: FC<MainPaginationButtonsProps> = ({ currentPage, onClick, paginationRange }) => {\r\n    return (\r\n        <>\r\n            {paginationRange.map((page: number | string, index) => {\r\n                const isSelected = page === currentPage\r\n                if (typeof page !== 'number') {\r\n                    return <Dots key={index} />\r\n                }\r\n                return <PageButton key={index} onClick={onClick(page)} page={page} selected={isSelected} />\r\n            })}\r\n        </>\r\n    )\r\n}","import {useCallback, useMemo} from \"react\";\r\n\r\n//создаёт массив чисел от start до end включительно.\r\nconst range = (start: number, end: number) => {\r\n    const length = end - start + 1\r\n\r\n    return Array.from({ length }, (_, idx) => idx + start)\r\n}\r\n\r\nconst DOTS = '...'\r\n\r\ntype UsePaginationParamType = {\r\n    count: number                           // всего страниц\r\n    onChange: (pageNumber: number) => void  // функция смены страницы\r\n    page: number                            // текущая страница\r\n    siblings?: number                       // сколько \"соседних\" страниц показывать рядом с текущей\r\n}\r\n\r\ntype PaginationRange = ('...' | number)[]\r\n\r\nexport const usePagination = ({ count, onChange, page, siblings = 1 }: UsePaginationParamType) => {\r\n    const paginationRange = useMemo(() => {\r\n\r\n        // Это максимум страниц, которые мы хотим отрисовать без сокращения (текущая, первый, последний, и по одному \"соседу\" с каждой стороны + 2 точки).\r\n        const totalPageNumbers = siblings + 5\r\n\r\n        //case 1: Если страниц мало (влезают все)\r\n        if (totalPageNumbers >= count) {\r\n            return range(1, count)\r\n        }\r\n\r\n        //Рассчитайте левый и правый индексы родственных элементов и убедитесь, что они находятся в пределах диапазона 1 и totalPageCount.\r\n        const leftSiblingIndex = Math.max(page - siblings, 1)\r\n        const rightSiblingIndex = Math.min(page + siblings, count)\r\n\r\n        // Мы не отображаем точки, когда нужно вставить только один номер страницы\r\n        // между крайними значениями одноуровневых элементов и ограничениями количества страниц, то есть 1 и totalPageCount.\r\n        // Поэтому мы используем leftSiblingIndex > 2 и rightSiblingIndex < totalPageCount - 2.\r\n        const shouldShowLeftDots = leftSiblingIndex > 2\r\n        const shouldShowRightDots = rightSiblingIndex < count - 2\r\n\r\n        const firstPageIndex = 1\r\n        const lastPageIndex = count\r\n\r\n        //Case 2: Слева нет точек, но справа есть:\r\n        if (!shouldShowLeftDots && shouldShowRightDots) {\r\n            const leftItemCount = 3 + 2 * siblings\r\n            const leftRange = range(1, leftItemCount)\r\n\r\n            return [...leftRange, DOTS, count]\r\n        }\r\n\r\n        //case 3: Справа нет точек, но слева есть:\r\n        if (shouldShowLeftDots && !shouldShowRightDots) {\r\n            const rightItemCount = 3 + 2 * siblings\r\n            const rightRange = range(count - rightItemCount + 1, count)\r\n\r\n            return [firstPageIndex, DOTS, ...rightRange]\r\n        }\r\n        //case 4: Точки с обеих сторон:\r\n        if (shouldShowLeftDots && shouldShowRightDots) {\r\n            const middleRange = range(leftSiblingIndex, rightSiblingIndex)\r\n\r\n            return [firstPageIndex, DOTS, ...middleRange, DOTS, lastPageIndex]\r\n        }\r\n    }, [siblings, page, count]) as PaginationRange\r\n\r\n    const lastPage = paginationRange.at(-1)\r\n\r\n    const isFirstPage = page === 1\r\n    const isLastPage = page === lastPage\r\n\r\n    const handleNextPageClicked = useCallback(() => {\r\n        onChange(page + 1)\r\n    }, [page, onChange])\r\n\r\n    const handlePreviousPageClicked = useCallback(() => {\r\n        onChange(page - 1)\r\n    }, [page, onChange])\r\n\r\n    function handleMainPageClicked(pageNumber: number) {\r\n        return () => onChange(pageNumber)\r\n    }\r\n\r\n    return {\r\n        paginationRange,            // список номеров и \"...\" для отрисовки\r\n        handleMainPageClicked,      // клик по номеру страницы\r\n        handleNextPageClicked,      // клик \"вперёд\"\r\n        handlePreviousPageClicked,  // клик \"назад\"\r\n        isFirstPage,                // текущая — первая?\r\n        isLastPage                  // текущая — последняя?\r\n    }\r\n}","import {FC} from \"react\";\r\nimport {classNames, PerPageSelectProps} from \"@/components/pagination/paginationTypes\";\r\nimport {Selectbox} from \"@/components\";\r\n\r\nexport const PerPageSelect: FC<PerPageSelectProps> = ({onPerPageChange, perPage, perPageOptions}) => {\r\n    const selectOptions = perPageOptions.map(value => ({\r\n        label: value.toString(),\r\n        value,\r\n    }))\r\n\r\n    return (\r\n        <div className={classNames.selectBox}>\r\n            Show\r\n            <Selectbox\r\n                variant={'pagination'}\r\n                className={classNames.selectBox}\r\n                onValueChange={(val) => onPerPageChange(Number(val))}\r\n                options={selectOptions}\r\n                value={perPage}\r\n            />\r\n            on page\r\n        </div>\r\n    )\r\n}\r\n\r\n","import {FC} from \"react\";\r\nimport {PrevButton} from \"@/components/pagination/buttonsGroup/PrevButton\";\r\nimport {NextButton} from \"@/components/pagination/buttonsGroup/NextButton\";\r\nimport {classNames, PaginationProps} from \"@/components/pagination/paginationTypes\";\r\nimport {MainPaginationButtons} from \"@/components/pagination/buttonsGroup/MainPaginationButtons\";\r\nimport {usePagination} from \"@/components/pagination/usePagination\";\r\nimport {PerPageSelect} from \"@/components/pagination/PerPageSelect\";\r\n\r\nexport const Pagination: FC<PaginationProps> = ({\r\n                                                    count,\r\n                                                    onChange,\r\n                                                    onPerPageChange,\r\n                                                    page,\r\n                                                    perPage = null,\r\n                                                    perPageOptions,\r\n                                                    siblings,\r\n                                                }) => {\r\n    const {\r\n        handleMainPageClicked,\r\n        handleNextPageClicked,\r\n        handlePreviousPageClicked,\r\n        isFirstPage,\r\n        isLastPage,\r\n        paginationRange,\r\n    } = usePagination({\r\n        count,\r\n        onChange,\r\n        page,\r\n        siblings,\r\n    })\r\n\r\n    const showPerPageSelect = !!perPage && !!perPageOptions && !!onPerPageChange\r\n\r\n    return (\r\n        <div className={classNames.root}>\r\n            <div className={classNames.container}>\r\n                <PrevButton disabled={isFirstPage} onClick={handlePreviousPageClicked} size={16}/>\r\n                <MainPaginationButtons\r\n                    currentPage={page}\r\n                    onClick={handleMainPageClicked}\r\n                    paginationRange={paginationRange}\r\n                />\r\n                <NextButton disabled={isLastPage} onClick={handleNextPageClicked} size={16}/>\r\n            </div>\r\n\r\n            {showPerPageSelect && (\r\n                <PerPageSelect\r\n                    {...{\r\n                        onPerPageChange,\r\n                        perPage,\r\n                        perPageOptions,\r\n                    }}\r\n                />\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\n"],"names":["UniversalIcon","name","dataStatic","width","height","size","className","rest","svgElement","setSvgElement","React","res","svgString","options","domNode","el","attribs","jsx","parsed","parse","Alert","children","variant","onClose","closable","fullWidth","classNames","clsx","s","jsxs","buttonVariant","Button","as","Component","Card","styles","Checkbox","label","idProp","disabled","props","RadixCheckbox","CheckIcon","SelectItem","forwardedRef","Select","Selectbox","placeholder","value","onValueChange","onOpenChange","selectedOption","opt","ChevronDownIcon","option","Header","isAuth","isProcessingAuth","localization","notificationCount","convertNumber","Fragment","Input","id","inputType","errorText","required","showPassword","setShowPassword","useState","containerClassNames","isPassword","isSearch","currentInputType","variants","Radio","defaultValue","RadioGroup","ReCaptcha","isCaptchaPassed","setCaptchaToken","siteKey","submitHandler","token","ReCAPTCHA","textAreaVariant","TextAreaComponent","error","selected","PrevButton","onClick","NextButton","PageButton","page","Dots","MainPaginationButtons","currentPage","paginationRange","index","isSelected","range","start","end","length","_","idx","DOTS","usePagination","count","onChange","siblings","useMemo","leftSiblingIndex","rightSiblingIndex","shouldShowLeftDots","shouldShowRightDots","firstPageIndex","lastPageIndex","leftItemCount","rightItemCount","rightRange","middleRange","lastPage","isFirstPage","isLastPage","handleNextPageClicked","useCallback","handlePreviousPageClicked","handleMainPageClicked","pageNumber","PerPageSelect","onPerPageChange","perPage","perPageOptions","selectOptions","val","Pagination","showPerPageSelect"],"mappings":"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"}