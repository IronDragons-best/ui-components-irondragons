{"version":3,"file":"index.es.js","sources":["../src/components/common/unversalIcon/UniversalIcon.tsx","../src/components/alerts/Alerts.tsx","../src/components/button/Button.tsx","../src/components/card/Card.tsx","../src/components/checkbox/Checkbox.tsx","../src/components/selectbox/SelectItem.tsx","../src/components/selectbox/Selectbox.tsx","../src/components/header/Header.tsx","../src/components/input/Input.tsx","../src/components/radio/Radio.tsx","../src/components/reCaptcha/ReCaptcha.tsx","../src/components/textArea/TextArea.tsx","../src/components/pagination/paginationTypes.ts","../src/components/pagination/buttonsGroup/PrevButton.tsx","../src/components/pagination/buttonsGroup/NextButton.tsx","../src/components/pagination/buttonsGroup/PageButton.tsx","../src/components/pagination/buttonsGroup/Dots.tsx","../src/components/pagination/buttonsGroup/MainPaginationButtons.tsx","../src/components/pagination/usePagination.ts","../src/components/pagination/PerPageSelect.tsx","../src/components/pagination/Pagination.tsx"],"sourcesContent":["import React from 'react'\r\n\r\nimport parse, {domToReact, HTMLReactParserOptions, Element, DOMNode} from 'html-react-parser'\r\n\r\ntype Props = {\r\n    name: string,\r\n    dataStatic?: boolean,\r\n    width?: string,\r\n    height?: string,\r\n    size?: number\r\n    className?: string\r\n}\r\n\r\nexport const UniversalIcon = ({\r\n                                  name,\r\n                                  dataStatic = false,\r\n                                  width = '24px',\r\n                                  height = '24px',\r\n                                  size,\r\n                                  className,\r\n                                  ...rest\r\n                              }: Props) => {\r\n    const [svgElement, setSvgElement] = React.useState<React.ReactNode>(null)\r\n\r\n    React.useEffect(() => {\r\n        fetch(`/assets/icons/${name}.svg`)\r\n            .then(res => res.text())\r\n            .then(svgString => {\r\n                const options: HTMLReactParserOptions = {\r\n                    replace: (domNode) => {\r\n                        if (domNode.type === 'tag' && (domNode as Element).name === 'svg') {\r\n                            const el = domNode as Element;\r\n\r\n                            const attribs = {\r\n                                ...el.attribs,\r\n                                ...(dataStatic ? {'data-static': 'true'} : {'data-static': 'false'}),\r\n                                width: width,\r\n                                height: height,\r\n                                size: size,\r\n                                className: className,\r\n                                ...rest\r\n                            };\r\n                            return (\r\n                                <svg {...attribs}>\r\n                                    {domToReact(el.children as DOMNode[], options)}\r\n                                </svg>\r\n                            );\r\n                        }\r\n                    },\r\n                };\r\n\r\n                const parsed = parse(svgString, options)\r\n                setSvgElement(parsed)\r\n            })\r\n    }, [name, dataStatic])\r\n\r\n    return svgElement\r\n}\r\n","import { ComponentProps, FC, ReactNode } from 'react'\r\n\r\nimport { clsx } from 'clsx'\r\n\r\nimport s from './alerts.module.scss'\r\n\r\nimport { UniversalIcon } from '../common/unversalIcon/UniversalIcon'\r\n\r\nexport type AlertProps = {\r\n  /**\r\n   * **Required**: The content of the alert (usually text or elements).\r\n   */\r\n  children: ReactNode\r\n  /**\r\n   * Visual variant of the alert. Can be 'success' (green) or 'error' (red).\r\n   * Defaults to no variant styling.\r\n   */\r\n  variant?: 'success' | 'error'\r\n  /**\r\n   * Callback fired when the close button is clicked.\r\n   */\r\n  onClose?: () => void\r\n  /**\r\n   * **Required**: If true, the alert can be closed via a close button.\r\n   */\r\n  closable: boolean\r\n  /**\r\n   * If true, the alert stretches to the full width of its container.\r\n   */\r\n  fullWidth?: boolean\r\n} & ComponentProps<'div'>\r\n\r\nexport const Alert: FC<AlertProps> = ({\r\n  children,\r\n  variant = 'success',\r\n  onClose,\r\n  closable = true,\r\n  fullWidth = false,\r\n  ...rest\r\n}) => {\r\n  const classNames = {\r\n    box: clsx(s.box, variant === 'success' ? s.success : s.error, fullWidth && s.fullWidth),\r\n    content: s.content,\r\n    icon: clsx(s.icon),\r\n  }\r\n\r\n  return (\r\n    <div className={classNames.box} {...rest}>\r\n      <div className={classNames.content}>\r\n        {variant === 'error' ? (\r\n          <div>\r\n            <strong>Error!</strong> {children}\r\n          </div>\r\n        ) : (\r\n          <>{children}</>\r\n        )}\r\n        {closable && (\r\n          <span className={classNames.icon} onClick={onClose}>\r\n            <UniversalIcon name={'close'} />\r\n          </span>\r\n        )}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import { ComponentPropsWithoutRef, ElementType, ReactNode } from 'react'\r\n\r\nimport { clsx } from 'clsx'\r\n\r\nimport s from './button.module.scss'\r\n\r\nexport const buttonVariant = ['primary', 'secondary', 'outline', 'text_button'] as const\r\nexport type ButtonVariant = (typeof buttonVariant)[number]\r\n\r\nexport type ButtonOwnProps<T extends ElementType = 'button'> = {\r\n  /**  * The element or component to render as. For example, 'button', 'a' etc. Default = 'button */\r\n  as?: T\r\n  /**  * Makes the button take up the full width of its container. */\r\n  fullWidth?: boolean\r\n  /**  * Visual style variant of the button.*/\r\n  variant?: ButtonVariant\r\n  /**  * Disables the button.*/\r\n  disabled?: boolean\r\n  /**  **Required**: Button content.*/\r\n  children: ReactNode\r\n}\r\n\r\nexport type ButtonProps<T extends ElementType = 'button'> = ButtonOwnProps<T> &\r\n  Omit<ComponentPropsWithoutRef<T>, keyof ButtonOwnProps<T>>\r\n\r\nexport const Button = <T extends ElementType = 'button'>({\r\n  as,\r\n  children,\r\n  fullWidth = false,\r\n  className,\r\n  variant = 'primary',\r\n  ...rest\r\n}: ButtonProps<T>) => {\r\n  const classNames = clsx(s.button, s[variant], fullWidth && s.fullWidth, className)\r\n  const Component = (as || 'button') as ElementType\r\n\r\n  return (\r\n    <Component className={classNames} {...rest}>\r\n      {children}\r\n    </Component>\r\n  )\r\n}\r\n","import { ReactNode } from 'react';\r\n\r\nimport { clsx } from 'clsx';\r\n\r\nimport styles from './card.module.scss';\r\n\r\ntype cardSize = 'sm' | 'md' | 'lg';\r\n\r\ntype Props = {\r\n  /**\r\n   * Controls the card's padding and font scaling.\r\n   * @default 'md'\r\n   */\r\n  size?: cardSize;\r\n  /**\r\n   * Content to render inside the card.\r\n   * Accepts strings, JSX, arrays, etc.\r\n   */\r\n  children?: ReactNode;\r\n  /**\r\n   * When `true`, forces the card to occupy 100% of its parent's width.\r\n   * @default false\r\n   */\r\n  fullWidth?: boolean;\r\n};\r\n\r\nexport const Card = ({ children, fullWidth, size = 'md' }: Props) => {\r\n  const classNames = clsx(styles.cardBody, fullWidth && styles.fullWidth);\r\n\r\n  return (\r\n    <div className={classNames} data-cardsize={size}>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n","import {ComponentPropsWithoutRef, ReactNode} from 'react'\r\n\r\nimport { CheckIcon } from '@radix-ui/react-icons'\r\nimport { Checkbox as RadixCheckbox } from 'radix-ui'\r\n\r\nimport s from './checkbox.module.scss'\r\n\r\ntype CheckboxProps = {\r\n  /** **Required**: Unique identifier for the checkbox */\r\n  idProp: string\r\n  /** Label displayed next to the checkbox */\r\n  label?: ReactNode\r\n  /** Additional class name for styling */\r\n  className?: string\r\n  /** Disables the checkbox */\r\n  disabled?: boolean\r\n  /** Controls the checked state (if controlled externally) */\r\n  checked?: boolean\r\n} & ComponentPropsWithoutRef<typeof RadixCheckbox.Root>\r\n\r\nexport const Checkbox = ({ label, idProp, className, disabled, ...props }: CheckboxProps) => (\r\n  <div style={{ display: 'flex', alignItems: 'center' }}>\r\n    <RadixCheckbox.Root\r\n      className={s.Root}\r\n      defaultChecked\r\n      id={idProp}\r\n      aria-disabled={disabled}\r\n      {...props}\r\n    >\r\n      <RadixCheckbox.Indicator className={s.Indicator} aria-disabled={disabled}>\r\n        <CheckIcon />\r\n      </RadixCheckbox.Indicator>\r\n    </RadixCheckbox.Root>\r\n    <label className={s.Label} htmlFor={idProp} aria-disabled={disabled}>\r\n      {label}\r\n    </label>\r\n  </div>\r\n)\r\n","import * as React from 'react'\r\nimport { ComponentPropsWithoutRef, ElementRef, ForwardedRef } from 'react'\r\n\r\nimport clsx from 'clsx'\r\nimport { Select } from 'radix-ui'\r\n\r\nimport s from './selectbox.module.scss'\r\n\r\ntype SelectItemProps = {\r\n  value: string\r\n  variant?: 'default' | 'pagination'\r\n  children: React.ReactNode\r\n} & ComponentPropsWithoutRef<typeof Select.Item>\r\n\r\nexport const SelectItem = React.forwardRef<ElementRef<typeof Select.Item>, SelectItemProps>(\r\n  (\r\n    { children, variant, className, ...props }: SelectItemProps,\r\n    forwardedRef: ForwardedRef<ElementRef<typeof Select.Item>>\r\n  ): React.ReactElement => {\r\n    return (\r\n      <Select.Item className={clsx(s[`${variant}`], s.Item, className)} {...props} ref={forwardedRef}>\r\n        <Select.ItemText className={s.ItemContent}>{children}</Select.ItemText>\r\n      </Select.Item>\r\n    )\r\n  }\r\n)\r\n","import {ComponentPropsWithoutRef, FC} from 'react'\r\n\r\nimport {ChevronDownIcon} from '@radix-ui/react-icons'\r\nimport {Select} from 'radix-ui'\r\n\r\nimport '../../styles/index.scss'\r\n\r\nimport s from './selectbox.module.scss'\r\n\r\nimport {SelectItem} from './SelectItem'\r\nimport {UniversalIcon} from \"../common/unversalIcon/UniversalIcon\";\r\nimport {clsx} from \"clsx\";\r\n\r\ntype LanguageType = 'rus' | 'eng'\r\n\r\ntype OptionType = {\r\n  value: LanguageType | string | number,\r\n  label: string,\r\n  icon?: string\r\n}\r\n\r\ntype SelectboxProps = {\r\n  /** **Required**: Unique ID for the Select. Trigger and associated label */\r\n  idProp?: string\r\n  /** **Required**: Name attribute for the form (useful when submitting forms) */\r\n  name?: string\r\n  /** **Required**: Array of options to choose from, each with a label (display text) and value */\r\n  options: OptionType[]\r\n  /** Placeholder text shown when no option is selected */\r\n  placeholder?: string\r\n  /** Initial value */\r\n  value?: string | number;\r\n  variant?: 'default' | 'pagination';\r\n  /** Label displayed above the select input */\r\n  label?: string\r\n  /** Disables the select input */\r\n  disabled?: boolean\r\n  /** Additional CSS class names for the root element */\r\n  className?: string\r\n  /** If true, the select input stretches to the full width of its container */\r\n  fullWidth?: boolean\r\n  /** Callback fired when the selected value changes */\r\n  onValueChange?: (value: string) => void\r\n  /** Callback fired when the dropdown opens or closes */\r\n  onOpenChange?: (open: boolean) => void\r\n} & Omit<ComponentPropsWithoutRef<typeof Select.Root>, 'value' | 'onValueChange' | 'children'>\r\n\r\nexport const Selectbox: FC<SelectboxProps> = ({\r\n                                                idProp,\r\n                                                name,\r\n                                                label = '',\r\n                                                placeholder = 'Select...',\r\n                                                disabled = false,\r\n                                                className,\r\n                                                value,\r\n                                                fullWidth,\r\n                                                onValueChange,\r\n                                                onOpenChange,\r\n                                                options,\r\n                                                variant = 'default',\r\n                                                ...rest\r\n                                              }: SelectboxProps) => {\r\n  const selectedOption: OptionType | undefined = options.find(opt => opt.value === value);\r\n\r\n  return (\r\n    <Select.Root onValueChange={onValueChange} onOpenChange={onOpenChange} {...rest}>\r\n      {label && (\r\n        <label htmlFor={idProp} className={s.Label}>\r\n          {label}\r\n        </label>\r\n      )}\r\n      <Select.Trigger\r\n        id={idProp}\r\n        className={clsx(s[`${variant}`], s.Trigger, fullWidth && s.fullWidth)}\r\n        disabled={disabled}\r\n        aria-label={label}\r\n        data-label={label ? 'true' : 'false'}\r\n        name={name}\r\n      >\r\n        {selectedOption ? (\r\n          <div className={s.Selected}>\r\n            {selectedOption.icon && (\r\n              <span className={s.IconWrapper}><UniversalIcon name={selectedOption.icon} /></span>\r\n            )}\r\n            {selectedOption.label}\r\n          </div>\r\n        ) : (\r\n          <Select.Value placeholder={placeholder}/>\r\n        )}\r\n        <Select.Icon className={s.Icon}>\r\n          <ChevronDownIcon/>\r\n        </Select.Icon>\r\n      </Select.Trigger>\r\n\r\n      <Select.Portal>\r\n        <Select.Content className={clsx(s[`${variant}`], s.Content)} side={'bottom'} position={'popper'}>\r\n          <Select.Viewport className={s.Viewport}>\r\n            <Select.Group>\r\n              {options.map(option => (\r\n                <SelectItem className={s.Selected} key={option.value} variant={variant} value={option.value.toString()}>\r\n                  {option.icon && <span><UniversalIcon name={option.icon}/></span>}\r\n                  {option.label}\r\n                </SelectItem>\r\n              ))}\r\n            </Select.Group>\r\n          </Select.Viewport>\r\n        </Select.Content>\r\n      </Select.Portal>\r\n    </Select.Root>\r\n  )\r\n}\r\n","import {Selectbox} from \"../selectbox\";\r\nimport {UniversalIcon} from \"../common/unversalIcon/UniversalIcon\";\r\nimport {Button} from \"../button\";\r\n\r\nimport '../../styles/index.scss'\r\nimport s from './header.module.scss'\r\n\r\ntype Props = {\r\n  /** **Required**: Indicates if the user is authenticated */\r\n  isAuth: boolean,\r\n  /** Indicates if the user is authenticated */\r\n  isProcessingAuth?: boolean,\r\n  /** **Required**: Current selected localization value */\r\n  localization: string,\r\n  /** Optional number of notifications to display. If not provided, defaults to 0 */\r\n  notificationCount?: number,\r\n}\r\n\r\nexport const Header = ({\r\n                         isAuth,\r\n                         isProcessingAuth = false,\r\n                         localization,\r\n                         notificationCount = 0\r\n                       }: Props) => {\r\n  const convertNumber = (notificationCount: number): string => {\r\n    return notificationCount > 9 ? `9+` : `${notificationCount}`\r\n  }\r\n\r\n  return (\r\n    <header className={s.Header}>\r\n      <div>\r\n          <span className={s.Logo}>\r\n            Inctagram\r\n          </span>\r\n      </div>\r\n      <div className={s.Content}>\r\n        {isAuth && (\r\n          <div className={s.IconWrapper} data-notificationcount={convertNumber(notificationCount)}>\r\n            <UniversalIcon name={'outline-bell'}/>\r\n          </div>\r\n        )}\r\n        <Selectbox value={localization} name={'aaa'}\r\n                   options={[\r\n                     {label: 'Russian', value: 'rus', icon: 'Flag-Russia'},\r\n                     {label: 'English', value: 'eng', icon: 'Flag-United-Kingdom'}\r\n                   ]}\r\n                   idProp={localization}\r\n        />\r\n        {!isAuth && !isProcessingAuth && (\r\n          <>\r\n            <Button variant='text_button'>Sign in</Button>\r\n            <Button variant='primary'>Sign up</Button>\r\n          </>\r\n        )}\r\n      </div>\r\n    </header>\r\n  )\r\n}\r\n","import { InputHTMLAttributes, useState } from 'react'\r\n\r\nimport { clsx } from 'clsx'\r\n\r\nimport s from './input.module.scss'\r\n\r\nimport { UniversalIcon } from '@/components'\r\n\r\ntype InputVariant = 'search' | 'email' | 'password' | 'text'\r\n\r\ntype InputProps = InputHTMLAttributes<HTMLInputElement> & {\r\n  /** Defines the visual style of the input (e.g., \"search\", \"password\", \"text\"). */\r\n  inputType: InputVariant\r\n  /**  Optional label text displayed above the input field. */\r\n  label?: string\r\n  /** Error message displayed below the input when error is true. */\r\n  errorText?: string\r\n  /** \tIf true, the input spans 100% of its container width. */\r\n  fullWidth?: boolean\r\n}\r\n\r\nexport const Input = ({\r\n  id,\r\n  label,\r\n  inputType,\r\n  errorText,\r\n  disabled = false,\r\n  fullWidth = false,\r\n  required,\r\n  ...rest\r\n}: InputProps) => {\r\n  const [showPassword, setShowPassword] = useState(false)\r\n\r\n  const containerClassNames = clsx(s.inputContainer, errorText && s.error, fullWidth && s.fullWidth)\r\n\r\n  const isPassword = inputType === 'password'\r\n  const isSearch = inputType === 'search'\r\n\r\n  const currentInputType = (variants: InputVariant) => {\r\n    if (isPassword) {\r\n      return showPassword ? 'text' : 'password'\r\n    } else {\r\n      return variants\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={s.wrapper}>\r\n      {label && (\r\n        <label\r\n          data-requiredfield={required}\r\n          htmlFor={id}\r\n          className={s.label}\r\n          data-disabled={disabled}\r\n        >\r\n          {label}\r\n        </label>\r\n      )}\r\n      <div className={containerClassNames} data-disabled={disabled}>\r\n        {isSearch && (\r\n          <button type={'submit'} className={s.iconButton} data-disabled={disabled}>\r\n            <UniversalIcon name={'google'}/>\r\n          </button>\r\n        )}\r\n        <input\r\n          id={id}\r\n          type={currentInputType(inputType)}\r\n          required={required}\r\n          className={s.input}\r\n          autoComplete={'off'}\r\n          {...rest}\r\n        />\r\n\r\n        {isPassword && (\r\n          <button\r\n            type={'button'}\r\n            className={s.iconButton}\r\n            onClick={() => setShowPassword(!showPassword)}\r\n          >\r\n            {showPassword ? (\r\n              <UniversalIcon name={'eye-outline'} />\r\n            ) : (\r\n              <UniversalIcon name={'eye-off-outline'} />\r\n            )}\r\n          </button>\r\n        )}\r\n      </div>\r\n\r\n      {errorText && <div className={s.errorText}>{errorText}</div>}\r\n    </div>\r\n  )\r\n}\r\n","import { ComponentProps, InputHTMLAttributes, ReactElement } from 'react'\r\n\r\nimport { RadioGroup } from 'radix-ui'\r\n\r\nimport styles from './radio.module.scss'\r\n\r\nexport type RadioOptionsType = {\r\n  id: string\r\n  radioName: string\r\n}\r\n\r\ntype Props = ComponentProps<typeof RadioGroup.Root> &\r\n  InputHTMLAttributes<HTMLInputElement> & {\r\n    /** **Required**:Array of radio button options*/\r\n    options: RadioOptionsType[]\r\n    /** Disables all radio buttons */\r\n    selectedOption?: string\r\n  }\r\n\r\nexport const Radio = ({ options, defaultValue, disabled, ...rest }: Props): ReactElement => (\r\n  <RadioGroup.Root\r\n    className={styles.Root}\r\n    defaultValue={'default'}\r\n    aria-label={'View density'}\r\n    {...rest}\r\n  >\r\n    {options?.length &&\r\n      options.map(option => (\r\n        <div\r\n          className={disabled ? styles.disabled : ''}\r\n          style={{ display: 'flex', alignItems: 'center' }}\r\n          key={option.id}\r\n        >\r\n          <RadioGroup.Item className={styles.Item} value={option.radioName} id={option.id}>\r\n            <RadioGroup.Indicator className={styles.Indicator} />\r\n          </RadioGroup.Item>\r\n          <label className={styles.Label} htmlFor={option.id}>\r\n            {option.radioName}\r\n          </label>\r\n        </div>\r\n      ))}\r\n  </RadioGroup.Root>\r\n)\r\n","import { ReactElement } from 'react'\r\nimport ReCAPTCHA from 'react-google-recaptcha'\r\n\r\nimport { clsx } from 'clsx'\r\n\r\nimport styles from './ReCaptcha.module.scss'\r\n\r\ntype Props = {\r\n  /** **Required**: Tracks if captcha verification was completed successfully */\r\n  isCaptchaPassed: boolean\r\n  /** **Required**: Callback that receives the verification token string */\r\n  setCaptchaToken: (token: string) => void\r\n  siteKey: string\r\n}\r\n\r\n/**\r\n * ReCaptcha component that integrates Google reCAPTCHA v2\r\n * @component\r\n * @param {Object} props - Component props\r\n * @param {boolean} props.isCaptchaPassed - Flag indicating if captcha was successfully passed\r\n * @param {function(string): void} props.setCaptchaToken - Callback function to set the captcha token\r\n * @returns {JSX.Element} - Rendered reCAPTCHA component\r\n *\r\n * @example\r\n * // Basic usage\r\n * <ReCaptcha\r\n *   isCaptchaPassed={isVerified}\r\n *   setCaptchaToken={(token) => setToken(token)}\r\n * />\r\n */\r\n\r\nexport const ReCaptcha = ({ isCaptchaPassed, setCaptchaToken, siteKey, ...rest }: Props): ReactElement => {\r\n  const submitHandler = (token: string | null) => {\r\n    if (isCaptchaPassed && token) {\r\n      setCaptchaToken(token)\r\n    }\r\n  }\r\n\r\n  const classNames = clsx(styles.reCaptchaWrapper, !isCaptchaPassed && styles.reCaptchaError)\r\n\r\n  return (\r\n    <div className={classNames}>\r\n      <ReCAPTCHA\r\n        sitekey={siteKey}\r\n        onChange={submitHandler}\r\n        theme={'dark'}\r\n        {...rest}\r\n      />\r\n      {!isCaptchaPassed && (\r\n        <span className={styles.reCaptchaText}>Please verify that you are not a robot</span>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n","import { ComponentPropsWithoutRef, ElementType } from 'react'\r\n\r\nimport { clsx } from 'clsx'\r\n\r\nimport s from './textArea.module.scss'\r\n\r\nexport const textAreaVariant = ['default']\r\n\r\nexport type TextAreaVariant = (typeof textAreaVariant)[number]\r\n\r\nexport type TextAreaProps<T extends ElementType = 'textarea'> = {\r\n  /**\r\n   * Custom component or HTML element to render instead of the default 'textarea'.\r\n   * Useful for styling or using a wrapper component.\r\n   */\r\n  as?: T\r\n  /**\r\n   * Visual style variant for the TextArea (e.g. 'default', etc.).\r\n   */\r\n  variant?: TextAreaVariant\r\n  /**\r\n   * Label text displayed above the TextArea.\r\n   */\r\n  label?: string\r\n  /**\r\n   * If true, displays the component in an error state.\r\n   */\r\n  error?: boolean\r\n  /**\r\n   * Error message shown below the TextArea when `error` is true.\r\n   */\r\n  errorText?: string\r\n  /**\r\n   * If true, makes the TextArea take up the full width of its container.\r\n   */\r\n  fullWidth?: boolean\r\n  /**\r\n   * **Required**: ID for Text area.\r\n   */\r\n  id: string\r\n  asChild?: boolean\r\n} & ComponentPropsWithoutRef<T>\r\n\r\nexport const TextAreaComponent = <T extends ElementType = 'textarea'>(props: TextAreaProps<T>) => {\r\n  const {\r\n    className,\r\n    variant = 'default',\r\n    label,\r\n    error,\r\n    errorText,\r\n    disabled = false,\r\n    fullWidth = false,\r\n    id,\r\n    ...rest\r\n  } = props\r\n\r\n  const classNames = clsx(\r\n    s.textArea,\r\n    error ? s.error : s[variant],\r\n    disabled && s.disabled,\r\n    fullWidth && s.fullWidth,\r\n    className\r\n  )\r\n\r\n  return (\r\n    <div className={s.bodyTextArea}>\r\n      {label && (\r\n        <label className={s.label} htmlFor={id}>\r\n          {label}\r\n        </label>\r\n      )}\r\n      <textarea className={classNames} disabled={disabled} id={id} {...rest} />\r\n      {error && errorText && <div className={s.errorText}>{errorText}</div>}\r\n    </div>\r\n  )\r\n}\r\n","import {clsx} from \"clsx\";\r\nimport s from './pagination.module.scss'\r\n\r\ntype PaginationConditionals =\r\n    | {\r\n    onPerPageChange: (itemPerPage: number) => void\r\n    perPage: number\r\n    perPageOptions: number[]\r\n}\r\n    | {\r\n    onPerPageChange?: never\r\n    perPage?: null\r\n    perPageOptions?: never\r\n}\r\n\r\nexport type PaginationProps = {\r\n    count: number\r\n    onChange: (page: number) => void\r\n    onPerPageChange?: (itemPerPage: number) => void\r\n    page: number\r\n    perPage?: number\r\n    perPageOptions?: number[]\r\n    siblings?: number\r\n} & PaginationConditionals\r\n\r\nexport const classNames = {\r\n    container: s.container,\r\n    dots: s.dots,\r\n    icon: s.icon,\r\n    item: s.item,\r\n    pageButton(selected?: boolean) {\r\n        return clsx(this.item, selected && s.selected)\r\n    },\r\n    root: s.root,\r\n    select: s.select,\r\n    selectBox: s.selectBox,\r\n}\r\n\r\nexport type MainPaginationButtonsProps = {\r\n    currentPage: number\r\n    onClick: (pageNumber: number) => () => void\r\n    paginationRange: (number | string)[]\r\n}\r\n\r\nexport type NavigationButtonProps = {\r\n    disabled?: boolean\r\n    onClick: () => void\r\n    size?: number\r\n}\r\n\r\nexport type PageButtonProps = NavigationButtonProps & {\r\n    page: number\r\n    selected: boolean\r\n}\r\n\r\nexport type PerPageSelectProps = {\r\n    onPerPageChange: (itemPerPage: number) => void\r\n    perPage: number\r\n    perPageOptions: number[]\r\n}","import {FC} from \"react\";\r\nimport {UniversalIcon} from \"@/components\";\r\nimport {classNames, NavigationButtonProps} from \"@/components/pagination/paginationTypes\";\r\n\r\nexport const  PrevButton: FC<NavigationButtonProps> = ({disabled, onClick, size}) => {\r\n    return(\r\n        <button className={classNames.item} disabled={disabled} onClick={onClick}>\r\n            <UniversalIcon className={classNames.icon} name={'arrow-ios-back'} size={size}/>\r\n        </button>\r\n    )\r\n}","import {FC} from \"react\";\r\nimport {UniversalIcon} from \"@/components\";\r\nimport {classNames, NavigationButtonProps} from \"@/components/pagination/paginationTypes\";\r\n\r\nexport const NextButton:FC<NavigationButtonProps>= ({disabled, onClick, size}) => {\r\n    return (\r\n        <button className={classNames.item} disabled={disabled} onClick={onClick}>\r\n            <UniversalIcon className={classNames.icon} name={\"arrow-ios-forward\"} size={size}/>\r\n        </button>\r\n    )\r\n}","import {FC} from \"react\";\r\nimport {classNames, PageButtonProps} from \"@/components/pagination/paginationTypes\";\r\n\r\nexport const PageButton: FC<PageButtonProps> = ({disabled, onClick, page, selected}) => {\r\n    return (\r\n        <button className={\r\n                classNames.pageButton(selected)}\r\n                disabled={selected || disabled}\r\n                onClick={onClick}\r\n                type={\"button\"}\r\n        >\r\n            {page}\r\n        </button>\r\n    )\r\n};","import {FC} from \"react\";\r\nimport {classNames} from \"@/components/pagination/paginationTypes\";\r\n\r\nexport const Dots: FC = () => {\r\n    return (\r\n        <span className={classNames.dots}>&#8230;</span>\r\n    )\r\n}","import {FC} from \"react\";\r\nimport {MainPaginationButtonsProps} from \"@/components/pagination/paginationTypes\";\r\nimport {PageButton} from \"@/components/pagination/buttonsGroup/PageButton\";\r\nimport {Dots} from \"@/components/pagination/buttonsGroup/Dots\";\r\n\r\nexport const MainPaginationButtons: FC<MainPaginationButtonsProps> = ({ currentPage, onClick, paginationRange }) => {\r\n    return (\r\n        <>\r\n            {paginationRange.map((page: number | string, index) => {\r\n                const isSelected = page === currentPage\r\n                if (typeof page !== 'number') {\r\n                    return <Dots key={index} />\r\n                }\r\n                return <PageButton key={index} onClick={onClick(page)} page={page} selected={isSelected} />\r\n            })}\r\n        </>\r\n    )\r\n}","import {useCallback, useMemo} from \"react\";\r\n\r\n//создаёт массив чисел от start до end включительно.\r\nconst range = (start: number, end: number) => {\r\n    const length = end - start + 1\r\n\r\n    return Array.from({ length }, (_, idx) => idx + start)\r\n}\r\n\r\nconst DOTS = '...'\r\n\r\ntype UsePaginationParamType = {\r\n    count: number                           // всего страниц\r\n    onChange: (pageNumber: number) => void  // функция смены страницы\r\n    page: number                            // текущая страница\r\n    siblings?: number                       // сколько \"соседних\" страниц показывать рядом с текущей\r\n}\r\n\r\ntype PaginationRange = ('...' | number)[]\r\n\r\nexport const usePagination = ({ count, onChange, page, siblings = 1 }: UsePaginationParamType) => {\r\n    const paginationRange = useMemo(() => {\r\n\r\n        // Это максимум страниц, которые мы хотим отрисовать без сокращения (текущая, первый, последний, и по одному \"соседу\" с каждой стороны + 2 точки).\r\n        const totalPageNumbers = siblings + 5\r\n\r\n        //case 1: Если страниц мало (влезают все)\r\n        if (totalPageNumbers >= count) {\r\n            return range(1, count)\r\n        }\r\n\r\n        //Рассчитайте левый и правый индексы родственных элементов и убедитесь, что они находятся в пределах диапазона 1 и totalPageCount.\r\n        const leftSiblingIndex = Math.max(page - siblings, 1)\r\n        const rightSiblingIndex = Math.min(page + siblings, count)\r\n\r\n        // Мы не отображаем точки, когда нужно вставить только один номер страницы\r\n        // между крайними значениями одноуровневых элементов и ограничениями количества страниц, то есть 1 и totalPageCount.\r\n        // Поэтому мы используем leftSiblingIndex > 2 и rightSiblingIndex < totalPageCount - 2.\r\n        const shouldShowLeftDots = leftSiblingIndex > 2\r\n        const shouldShowRightDots = rightSiblingIndex < count - 2\r\n\r\n        const firstPageIndex = 1\r\n        const lastPageIndex = count\r\n\r\n        //Case 2: Слева нет точек, но справа есть:\r\n        if (!shouldShowLeftDots && shouldShowRightDots) {\r\n            const leftItemCount = 3 + 2 * siblings\r\n            const leftRange = range(1, leftItemCount)\r\n\r\n            return [...leftRange, DOTS, count]\r\n        }\r\n\r\n        //case 3: Справа нет точек, но слева есть:\r\n        if (shouldShowLeftDots && !shouldShowRightDots) {\r\n            const rightItemCount = 3 + 2 * siblings\r\n            const rightRange = range(count - rightItemCount + 1, count)\r\n\r\n            return [firstPageIndex, DOTS, ...rightRange]\r\n        }\r\n        //case 4: Точки с обеих сторон:\r\n        if (shouldShowLeftDots && shouldShowRightDots) {\r\n            const middleRange = range(leftSiblingIndex, rightSiblingIndex)\r\n\r\n            return [firstPageIndex, DOTS, ...middleRange, DOTS, lastPageIndex]\r\n        }\r\n    }, [siblings, page, count]) as PaginationRange\r\n\r\n    const lastPage = paginationRange.at(-1)\r\n\r\n    const isFirstPage = page === 1\r\n    const isLastPage = page === lastPage\r\n\r\n    const handleNextPageClicked = useCallback(() => {\r\n        onChange(page + 1)\r\n    }, [page, onChange])\r\n\r\n    const handlePreviousPageClicked = useCallback(() => {\r\n        onChange(page - 1)\r\n    }, [page, onChange])\r\n\r\n    function handleMainPageClicked(pageNumber: number) {\r\n        return () => onChange(pageNumber)\r\n    }\r\n\r\n    return {\r\n        paginationRange,            // список номеров и \"...\" для отрисовки\r\n        handleMainPageClicked,      // клик по номеру страницы\r\n        handleNextPageClicked,      // клик \"вперёд\"\r\n        handlePreviousPageClicked,  // клик \"назад\"\r\n        isFirstPage,                // текущая — первая?\r\n        isLastPage                  // текущая — последняя?\r\n    }\r\n}","import {FC} from \"react\";\r\nimport {classNames, PerPageSelectProps} from \"@/components/pagination/paginationTypes\";\r\nimport {Selectbox} from \"@/components\";\r\n\r\nexport const PerPageSelect: FC<PerPageSelectProps> = ({onPerPageChange, perPage, perPageOptions}) => {\r\n    const selectOptions = perPageOptions.map(value => ({\r\n        label: value.toString(),\r\n        value,\r\n    }))\r\n\r\n    return (\r\n        <div className={classNames.selectBox}>\r\n            Show\r\n            <Selectbox\r\n                variant={'pagination'}\r\n                className={classNames.selectBox}\r\n                onValueChange={(val) => onPerPageChange(Number(val))}\r\n                options={selectOptions}\r\n                value={perPage}\r\n            />\r\n            on page\r\n        </div>\r\n    )\r\n}\r\n\r\n","import {FC} from \"react\";\r\nimport {PrevButton} from \"@/components/pagination/buttonsGroup/PrevButton\";\r\nimport {NextButton} from \"@/components/pagination/buttonsGroup/NextButton\";\r\nimport {classNames, PaginationProps} from \"@/components/pagination/paginationTypes\";\r\nimport {MainPaginationButtons} from \"@/components/pagination/buttonsGroup/MainPaginationButtons\";\r\nimport {usePagination} from \"@/components/pagination/usePagination\";\r\nimport {PerPageSelect} from \"@/components/pagination/PerPageSelect\";\r\n\r\nexport const Pagination: FC<PaginationProps> = ({\r\n                                                    count,\r\n                                                    onChange,\r\n                                                    onPerPageChange,\r\n                                                    page,\r\n                                                    perPage = null,\r\n                                                    perPageOptions,\r\n                                                    siblings,\r\n                                                }) => {\r\n    const {\r\n        handleMainPageClicked,\r\n        handleNextPageClicked,\r\n        handlePreviousPageClicked,\r\n        isFirstPage,\r\n        isLastPage,\r\n        paginationRange,\r\n    } = usePagination({\r\n        count,\r\n        onChange,\r\n        page,\r\n        siblings,\r\n    })\r\n\r\n    const showPerPageSelect = !!perPage && !!perPageOptions && !!onPerPageChange\r\n\r\n    return (\r\n        <div className={classNames.root}>\r\n            <div className={classNames.container}>\r\n                <PrevButton disabled={isFirstPage} onClick={handlePreviousPageClicked} size={16}/>\r\n                <MainPaginationButtons\r\n                    currentPage={page}\r\n                    onClick={handleMainPageClicked}\r\n                    paginationRange={paginationRange}\r\n                />\r\n                <NextButton disabled={isLastPage} onClick={handleNextPageClicked} size={16}/>\r\n            </div>\r\n\r\n            {showPerPageSelect && (\r\n                <PerPageSelect\r\n                    {...{\r\n                        onPerPageChange,\r\n                        perPage,\r\n                        perPageOptions,\r\n                    }}\r\n                />\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\n"],"names":["UniversalIcon","name","dataStatic","width","height","size","className","rest","svgElement","setSvgElement","React","res","svgString","options","domNode","el","attribs","jsx","parsed","parse","Alert","children","variant","onClose","closable","fullWidth","classNames","clsx","s","jsxs","buttonVariant","Button","as","Card","styles","Checkbox","label","idProp","disabled","props","RadixCheckbox","CheckIcon","SelectItem","forwardedRef","Select","Selectbox","placeholder","value","onValueChange","onOpenChange","selectedOption","opt","ChevronDownIcon","option","Header","isAuth","isProcessingAuth","localization","notificationCount","convertNumber","Fragment","Input","id","inputType","errorText","required","showPassword","setShowPassword","useState","containerClassNames","isPassword","isSearch","currentInputType","variants","Radio","defaultValue","RadioGroup","ReCaptcha","isCaptchaPassed","setCaptchaToken","siteKey","submitHandler","token","ReCAPTCHA","textAreaVariant","TextAreaComponent","error","selected","PrevButton","onClick","NextButton","PageButton","page","Dots","MainPaginationButtons","currentPage","paginationRange","index","isSelected","range","start","end","length","_","idx","DOTS","usePagination","count","onChange","siblings","useMemo","leftSiblingIndex","rightSiblingIndex","shouldShowLeftDots","shouldShowRightDots","firstPageIndex","lastPageIndex","leftItemCount","rightItemCount","rightRange","middleRange","lastPage","isFirstPage","isLastPage","handleNextPageClicked","useCallback","handlePreviousPageClicked","handleMainPageClicked","pageNumber","PerPageSelect","onPerPageChange","perPage","perPageOptions","selectOptions","val","Pagination","showPerPageSelect"],"mappings":"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"}