{"version":3,"file":"index.es.js","sources":["../src/components/alerts/Alerts.tsx","../src/components/button/Button.tsx","../src/components/card/Card.tsx","../src/components/checkbox/Checkbox.tsx","../src/components/selectbox/SelectItem.tsx","../src/components/common/unversalIcon/UniversalIcon.tsx","../src/components/selectbox/Selectbox.tsx","../src/components/header/Header.tsx","../src/components/input/Input.tsx","../src/components/radio/Radio.tsx","../src/components/reCaptcha/ReCaptcha.tsx","../src/components/textArea/TextArea.tsx","../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/locale/_lib/buildFormatLongFn.js","../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/locale/_lib/buildLocalizeFn.js","../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/locale/_lib/buildMatchFn.js","../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/locale/_lib/buildMatchPatternFn.js","../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/locale/en-US/_lib/formatDistance.js","../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/locale/en-US/_lib/formatRelative.js","../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/locale/en-US/_lib/localize.js","../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/locale/en-US/_lib/match.js","../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/locale/en-GB/_lib/formatLong.js","../node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/locale/en-GB.js","../src/components/datePicker/Calendar.tsx","../src/components/datePicker/DatePicker.tsx","../src/components/tabs/Tabs.tsx","../src/components/pagination/paginationTypes.ts","../src/components/pagination/buttonsGroup/PrevButton.tsx","../src/components/pagination/buttonsGroup/NextButton.tsx","../src/components/pagination/buttonsGroup/PageButton.tsx","../src/components/pagination/buttonsGroup/Dots.tsx","../src/components/pagination/buttonsGroup/MainPaginationButtons.tsx","../src/components/pagination/usePagination.ts","../src/components/pagination/PerPageSelect.tsx","../src/components/pagination/Pagination.tsx"],"sourcesContent":["import { ComponentProps, FC, ReactNode, useEffect } from 'react'\r\n\r\nimport { clsx } from 'clsx'\r\n\r\nimport s from './alerts.module.scss'\r\n\r\nimport { UniversalIcon } from '@/components'\r\n\r\nexport type AlertProps = {\r\n  /**\r\n   * **Required**: The content of the alert (usually text or elements).\r\n   */\r\n  children: ReactNode\r\n  /**\r\n   * Visual variant of the alert. Can be 'success' (green) or 'error' (red).\r\n   * Defaults to no variant styling.\r\n   */\r\n  variant?: 'success' | 'error'\r\n  /**\r\n   * Callback fired when the close button is clicked.\r\n   */\r\n  onClose: () => void\r\n  /**\r\n   * **Required**: If true, the alert can be closed via a close button.\r\n   */\r\n  withCloseIcon?: boolean\r\n  /**\r\n   * If true, the alert stretches to the full width of its container.\r\n   */\r\n  fullWidth?: boolean\r\n  isOpen: boolean\r\n} & ComponentProps<'div'>\r\n\r\nexport const Alert: FC<AlertProps> = ({\r\n  children,\r\n  variant = 'success',\r\n  onClose,\r\n  withCloseIcon = true,\r\n  fullWidth = false,\r\n  isOpen = false,\r\n  ...rest\r\n}) => {\r\n  const classNames = {\r\n    box: clsx(s.box, variant === 'success' ? s.success : s.error, fullWidth && s.fullWidth),\r\n    content: s.content,\r\n    icon: clsx(s.icon),\r\n  }\r\n  useEffect(() => {\r\n    let timerId: any\r\n    if (isOpen) {\r\n      timerId = setTimeout(onClose, 5000)\r\n    }\r\n\r\n    return () => clearTimeout(timerId)\r\n  }, [isOpen])\r\n\r\n  return (\r\n    <div className={classNames.box} {...rest} data-isopen={isOpen}>\r\n      <div className={classNames.content}>\r\n        {variant === 'error' ? (\r\n          <div>\r\n            <strong>Error!</strong> {children}\r\n          </div>\r\n        ) : (\r\n          <>{children}</>\r\n        )}\r\n        {withCloseIcon && (\r\n          <span className={classNames.icon} onClick={onClose}>\r\n            <UniversalIcon name={'close'} />\r\n          </span>\r\n        )}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import { ComponentPropsWithoutRef, ElementType, ReactNode } from 'react'\r\n\r\nimport { clsx } from 'clsx'\r\n\r\nimport s from './button.module.scss'\r\n\r\nexport const buttonVariant = ['primary', 'secondary', 'outline', 'text_button'] as const\r\nexport type ButtonVariant = (typeof buttonVariant)[number]\r\n\r\nexport type ButtonOwnProps<T extends ElementType = 'button'> = {\r\n  /**  * The element or component to render as. For example, 'button', 'a' etc. Default = 'button */\r\n  as?: T\r\n  /**  * Makes the button take up the full width of its container. */\r\n  fullWidth?: boolean\r\n  /**  * Visual style variant of the button.*/\r\n  variant?: ButtonVariant\r\n  /**  * Disables the button.*/\r\n  disabled?: boolean\r\n  /**  **Required**: Button content.*/\r\n  children: ReactNode\r\n}\r\n\r\nexport type ButtonProps<T extends ElementType = 'button'> = ButtonOwnProps<T> &\r\n  Omit<ComponentPropsWithoutRef<T>, keyof ButtonOwnProps<T>>\r\n\r\nexport const Button = <T extends ElementType = 'button'>({\r\n  as,\r\n  children,\r\n  fullWidth = false,\r\n  className,\r\n  variant = 'primary',\r\n  ...rest\r\n}: ButtonProps<T>) => {\r\n  const classNames = clsx(s.button, s[variant], fullWidth && s.fullWidth, className)\r\n  const Component = (as || 'button') as ElementType\r\n\r\n  return (\r\n    <Component className={classNames} {...rest}>\r\n      {children}\r\n    </Component>\r\n  )\r\n}\r\n","import { ReactNode } from 'react';\r\n\r\nimport { clsx } from 'clsx';\r\n\r\nimport styles from './card.module.scss';\r\n\r\ntype cardSize = 'sm' | 'md' | 'lg';\r\n\r\ntype Props = {\r\n  /**\r\n   * Controls the card's padding and font scaling.\r\n   * @default 'md'\r\n   */\r\n  size?: cardSize;\r\n  /**\r\n   * Content to render inside the card.\r\n   * Accepts strings, JSX, arrays, etc.\r\n   */\r\n  children?: ReactNode;\r\n  /**\r\n   * When `true`, forces the card to occupy 100% of its parent's width.\r\n   * @default false\r\n   */\r\n  fullWidth?: boolean;\r\n};\r\n\r\nexport const Card = ({ children, fullWidth, size = 'md' }: Props) => {\r\n  const classNames = clsx(styles.cardBody, fullWidth && styles.fullWidth);\r\n\r\n  return (\r\n    <div className={classNames} data-cardsize={size}>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n","import {ComponentPropsWithoutRef, ReactNode} from 'react'\r\n\r\nimport { CheckIcon } from '@radix-ui/react-icons'\r\nimport { Checkbox as RadixCheckbox } from 'radix-ui'\r\n\r\nimport s from './checkbox.module.scss'\r\n\r\ntype CheckboxProps = {\r\n  /** **Required**: Unique identifier for the checkbox */\r\n  idProp: string\r\n  /** Label displayed next to the checkbox */\r\n  label?: ReactNode\r\n  /** Additional class name for styling */\r\n  className?: string\r\n  /** Disables the checkbox */\r\n  disabled?: boolean\r\n  /** Controls the checked state (if controlled externally) */\r\n  checked?: boolean\r\n} & ComponentPropsWithoutRef<typeof RadixCheckbox.Root>\r\n\r\nexport const Checkbox = ({ label, idProp, className, disabled, ...props }: CheckboxProps) => (\r\n  <div style={{ display: 'flex', alignItems: 'center' }}>\r\n    <RadixCheckbox.Root\r\n      className={s.Root}\r\n      defaultChecked\r\n      id={idProp}\r\n      aria-disabled={disabled}\r\n      {...props}\r\n    >\r\n      <RadixCheckbox.Indicator className={s.Indicator} aria-disabled={disabled}>\r\n        <CheckIcon />\r\n      </RadixCheckbox.Indicator>\r\n    </RadixCheckbox.Root>\r\n    <label className={s.Label} htmlFor={idProp} aria-disabled={disabled}>\r\n      {label}\r\n    </label>\r\n  </div>\r\n)\r\n","import * as React from 'react'\r\nimport { ComponentPropsWithoutRef, ElementRef, ForwardedRef } from 'react'\r\n\r\nimport clsx from 'clsx'\r\nimport { Select } from 'radix-ui'\r\n\r\nimport s from './selectbox.module.scss'\r\n\r\ntype SelectItemProps = {\r\n  value: string\r\n  variant?: 'default' | 'pagination'\r\n  children: React.ReactNode\r\n} & ComponentPropsWithoutRef<typeof Select.Item>\r\n\r\nexport const SelectItem = React.forwardRef<ElementRef<typeof Select.Item>, SelectItemProps>(\r\n  (\r\n    { children, variant, className, ...props }: SelectItemProps,\r\n    forwardedRef: ForwardedRef<ElementRef<typeof Select.Item>>\r\n  ): React.ReactElement => {\r\n    return (\r\n      <Select.Item className={clsx(s[`${variant}`], s.Item, className)} {...props} ref={forwardedRef}>\r\n        <Select.ItemText className={s.ItemContent}>{children}</Select.ItemText>\r\n      </Select.Item>\r\n    )\r\n  }\r\n)\r\n","import React from 'react'\r\n\r\nimport parse, { domToReact, HTMLReactParserOptions, Element, DOMNode } from 'html-react-parser'\r\n\r\ntype Props = {\r\n  name: string\r\n  dataStatic?: boolean\r\n  width?: string\r\n  height?: string\r\n  size?: number\r\n  className?: string\r\n}\r\n\r\nexport const UniversalIcon = ({\r\n  name,\r\n  dataStatic = false,\r\n  width = '24px',\r\n  height = '24px',\r\n  size,\r\n  className,\r\n  ...rest\r\n}: Props) => {\r\n  const [svgElement, setSvgElement] = React.useState<React.ReactNode>(null)\r\n\r\n  React.useEffect(() => {\r\n    fetch(`/assets/icons/${name}.svg`)\r\n      .then(res => res.text())\r\n      .then(svgString => {\r\n        const options: HTMLReactParserOptions = {\r\n          replace: domNode => {\r\n            if (domNode.type === 'tag' && (domNode as Element).name === 'svg') {\r\n              const el = domNode as Element\r\n\r\n              const attribs: Record<string, any> = {\r\n                ...el.attribs,\r\n                ...(dataStatic ? { 'data-static': 'true' } : { 'data-static': 'false' }),\r\n                width: width,\r\n                height: height,\r\n                size: size,\r\n                className: className,\r\n                ...rest,\r\n              }\r\n\r\n              // Правильно преобразуем XML-атрибуты\r\n              if ('xmlnsxlink' in el.attribs) {\r\n                attribs.xmlnsXlink = el.attribs.xmlnsxlink\r\n                delete attribs.xmlnsxlink\r\n              }\r\n\r\n              // Преобразуем xlink:href в xlinkHref\r\n              if ('xlink:href' in el.attribs) {\r\n                attribs.xlinkHref = el.attribs['xlink:href']\r\n                delete attribs['xlink:href']\r\n              }\r\n\r\n              Object.keys(el.attribs).forEach(key => {\r\n                if (key.includes(':')) {\r\n                  const reactKey = key.replace(/:([a-z])/g, (_, letter) => letter.toUpperCase())\r\n                  attribs[reactKey] = el.attribs[key]\r\n                  delete attribs[key]\r\n                }\r\n              })\r\n\r\n              return <svg {...attribs}>{domToReact(el.children as DOMNode[], options)}</svg>\r\n            }\r\n          },\r\n        }\r\n\r\n        const parsed = parse(svgString, options)\r\n        setSvgElement(parsed)\r\n      })\r\n  }, [name, dataStatic])\r\n\r\n  return svgElement\r\n}\r\n","import { ComponentPropsWithoutRef, FC } from 'react'\r\n\r\nimport { ChevronDownIcon } from '@radix-ui/react-icons'\r\nimport { Select } from 'radix-ui'\r\n\r\nimport '../../styles/index.scss'\r\n\r\nimport s from './selectbox.module.scss'\r\n\r\nimport { SelectItem } from './SelectItem'\r\nimport { UniversalIcon } from '../common/unversalIcon/UniversalIcon'\r\nimport { clsx } from 'clsx'\r\n\r\ntype LanguageType = 'rus' | 'eng'\r\n\r\ntype OptionType = {\r\n  value: LanguageType | string | number\r\n  label: string\r\n  icon?: string\r\n}\r\n\r\ntype SelectboxProps = {\r\n  /** **Required**: Unique ID for the Select. Trigger and associated label */\r\n  idProp?: string\r\n  /** **Required**: Name attribute for the form (useful when submitting forms) */\r\n  name?: string\r\n  /** **Required**: Array of options to choose from, each with a label (display text) and value */\r\n  options: OptionType[]\r\n  /** Placeholder text shown when no option is selected */\r\n  placeholder?: string\r\n  /** Initial value */\r\n  value?: string | number\r\n  variant?: 'default' | 'pagination'\r\n  /** Label displayed above the select input */\r\n  label?: string\r\n  /** Disables the select input */\r\n  disabled?: boolean\r\n  /** Additional CSS class names for the root element */\r\n  className?: string\r\n  /** If true, the select input stretches to the full width of its container */\r\n  fullWidth?: boolean\r\n  /** Callback fired when the selected value changes */\r\n  onValueChange?: (value: string) => void\r\n  /** Callback fired when the dropdown opens or closes */\r\n  onOpenChange?: (open: boolean) => void\r\n} & Omit<ComponentPropsWithoutRef<typeof Select.Root>, 'value' | 'onValueChange' | 'children'>\r\n\r\nexport const Selectbox: FC<SelectboxProps> = ({\r\n  idProp,\r\n  name,\r\n  label = '',\r\n  placeholder = 'Select...',\r\n  disabled = false,\r\n  className,\r\n  value,\r\n  fullWidth,\r\n  onValueChange,\r\n  onOpenChange,\r\n  options,\r\n  variant = 'default',\r\n  ...rest\r\n}: SelectboxProps) => {\r\n  const selectedOption: OptionType | undefined = options.find(opt => opt.value === value)\r\n\r\n  return (\r\n    <Select.Root onValueChange={onValueChange} onOpenChange={onOpenChange} {...rest}>\r\n      {label && (\r\n        <label htmlFor={idProp} className={s.Label}>\r\n          {label}\r\n        </label>\r\n      )}\r\n      <Select.Trigger\r\n        id={idProp}\r\n        className={clsx(s[`${variant}`], s.Trigger, fullWidth && s.fullWidth)}\r\n        disabled={disabled}\r\n        aria-label={label}\r\n        data-label={label ? 'true' : 'false'}\r\n        name={name}\r\n      >\r\n        {selectedOption ? (\r\n          <div className={s.Selected}>\r\n            {selectedOption.icon && (\r\n              <span className={s.IconWrapper}>\r\n                <UniversalIcon name={selectedOption.icon} />\r\n              </span>\r\n            )}\r\n            {selectedOption.label}\r\n          </div>\r\n        ) : (\r\n          <Select.Value placeholder={placeholder} />\r\n        )}\r\n        <Select.Icon className={s.Icon}>\r\n          <ChevronDownIcon />\r\n        </Select.Icon>\r\n      </Select.Trigger>\r\n\r\n      <Select.Portal>\r\n        <Select.Content\r\n          className={clsx(s[`${variant}`], s.Content)}\r\n          side={'bottom'}\r\n          position={'popper'}\r\n        >\r\n          <Select.Viewport className={s.Viewport}>\r\n            <Select.Group>\r\n              {options.map(option => (\r\n                <SelectItem\r\n                  className={s.Selected}\r\n                  key={option.value}\r\n                  variant={variant}\r\n                  value={option.value.toString()}\r\n                >\r\n                  {option.icon && (\r\n                    <span>\r\n                      <UniversalIcon name={option.icon} />\r\n                    </span>\r\n                  )}\r\n                  {option.label}\r\n                </SelectItem>\r\n              ))}\r\n            </Select.Group>\r\n          </Select.Viewport>\r\n        </Select.Content>\r\n      </Select.Portal>\r\n    </Select.Root>\r\n  )\r\n}\r\n","import {Selectbox} from \"../selectbox\";\r\nimport {UniversalIcon} from \"../common/unversalIcon/UniversalIcon\";\r\nimport {Button} from \"../button\";\r\n\r\nimport '../../styles/index.scss'\r\nimport s from './header.module.scss'\r\n\r\ntype Props = {\r\n  /** **Required**: Indicates if the user is authenticated */\r\n  isAuth: boolean,\r\n  /** Indicates if the user is authenticated */\r\n  isProcessingAuth?: boolean,\r\n  /** **Required**: Current selected localization value */\r\n  localization: string,\r\n  /** Optional number of notifications to display. If not provided, defaults to 0 */\r\n  notificationCount?: number,\r\n}\r\n\r\nexport const Header = ({\r\n                         isAuth,\r\n                         isProcessingAuth = false,\r\n                         localization,\r\n                         notificationCount = 0\r\n                       }: Props) => {\r\n  const convertNumber = (notificationCount: number): string => {\r\n    return notificationCount > 9 ? `9+` : `${notificationCount}`\r\n  }\r\n\r\n  return (\r\n    <header className={s.Header}>\r\n      <div>\r\n          <span className={s.Logo}>\r\n            Inctagram\r\n          </span>\r\n      </div>\r\n      <div className={s.Content}>\r\n        {isAuth && (\r\n          <div className={s.IconWrapper} data-notificationcount={convertNumber(notificationCount)}>\r\n            <UniversalIcon name={'outline-bell'}/>\r\n          </div>\r\n        )}\r\n        <Selectbox value={localization} name={'aaa'}\r\n                   options={[\r\n                     {label: 'Russian', value: 'rus', icon: 'Flag-Russia'},\r\n                     {label: 'English', value: 'eng', icon: 'Flag-United-Kingdom'}\r\n                   ]}\r\n                   idProp={localization}\r\n        />\r\n        {!isAuth && !isProcessingAuth && (\r\n          <>\r\n            <Button variant='text_button'>Sign in</Button>\r\n            <Button variant='primary'>Sign up</Button>\r\n          </>\r\n        )}\r\n      </div>\r\n    </header>\r\n  )\r\n}\r\n","import { InputHTMLAttributes, useState } from 'react'\r\n\r\nimport { clsx } from 'clsx'\r\n\r\nimport s from './input.module.scss'\r\n\r\nimport { UniversalIcon } from '@/components'\r\n\r\ntype InputVariant = 'search' | 'email' | 'password' | 'text'  | 'location'\r\n\r\ntype InputProps = InputHTMLAttributes<HTMLInputElement> & {\r\n  /** Defines the visual style of the input (e.g., \"search\", \"password\", \"text\"). */\r\n  inputType: InputVariant\r\n  /**  Optional label text displayed above the input field. */\r\n  label?: string\r\n  /** Error message displayed below the input when error is true. */\r\n  errorText?: string\r\n  /** \tIf true, the input spans 100% of its container width. */\r\n  fullWidth?: boolean\r\n}\r\n\r\nexport const Input = ({\r\n  id,\r\n  label,\r\n  inputType,\r\n  errorText,\r\n  disabled = false,\r\n  fullWidth = false,\r\n  required,\r\n  ...rest\r\n}: InputProps) => {\r\n  const [showPassword, setShowPassword] = useState(false)\r\n\r\n  const containerClassNames = clsx(s.inputContainer, errorText && s.error, fullWidth && s.fullWidth)\r\n\r\n  const isPassword = inputType === 'password'\r\n  const isSearch = inputType === 'search'\r\n  const isLocation = inputType === 'location'\r\n\r\n  const currentInputType = (variants: InputVariant) => {\r\n    if (isPassword) {\r\n      return showPassword ? 'text' : 'password'\r\n    } else {\r\n      return variants\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={s.wrapper}>\r\n      {label && (\r\n        <label\r\n          data-requiredfield={required}\r\n          htmlFor={id}\r\n          className={s.label}\r\n          data-disabled={disabled}\r\n        >\r\n          {label}\r\n        </label>\r\n      )}\r\n      <div className={containerClassNames} data-disabled={disabled}>\r\n        {isSearch && (\r\n          <button type={'submit'} className={s.iconButton} data-disabled={disabled}>\r\n            <UniversalIcon name={'google'} />\r\n          </button>\r\n        )}\r\n        <input\r\n          id={id}\r\n          type={currentInputType(inputType)}\r\n          required={required}\r\n          className={s.input}\r\n          autoComplete={'off'}\r\n          {...rest}\r\n        />\r\n        {isLocation && (\r\n          <button type={'submit'} className={s.iconButton} data-disabled={disabled}>\r\n            <UniversalIcon name={'pin-outline'} />\r\n          </button>\r\n        )}\r\n\r\n        {isPassword && (\r\n          <button\r\n            type={'button'}\r\n            className={s.iconButton}\r\n            onClick={() => setShowPassword(!showPassword)}\r\n          >\r\n            {showPassword ? (\r\n              <UniversalIcon name={'eye-outline'} />\r\n            ) : (\r\n              <UniversalIcon name={'eye-off-outline'} />\r\n            )}\r\n          </button>\r\n        )}\r\n      </div>\r\n\r\n      {errorText && (\r\n        <span className={s.errorText} data-errortext={!!errorText}>\r\n          {errorText}\r\n        </span>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n","import { ComponentProps, InputHTMLAttributes, ReactElement } from 'react'\r\n\r\nimport { RadioGroup } from 'radix-ui'\r\n\r\nimport styles from './radio.module.scss'\r\n\r\nexport type RadioOptionsType = {\r\n  id: string\r\n  radioName: string\r\n}\r\n\r\ntype Props = ComponentProps<typeof RadioGroup.Root> &\r\n  InputHTMLAttributes<HTMLInputElement> & {\r\n    /** **Required**:Array of radio button options*/\r\n    options: RadioOptionsType[]\r\n    /** Disables all radio buttons */\r\n    selectedOption?: string\r\n  }\r\n\r\nexport const Radio = ({ options, defaultValue, disabled, ...rest }: Props): ReactElement => (\r\n  <RadioGroup.Root\r\n    className={styles.Root}\r\n    defaultValue={'default'}\r\n    aria-label={'View density'}\r\n    {...rest}\r\n  >\r\n    {options?.length &&\r\n      options.map(option => (\r\n        <div\r\n          className={disabled ? styles.disabled : ''}\r\n          style={{ display: 'flex', alignItems: 'center' }}\r\n          key={option.id}\r\n        >\r\n          <RadioGroup.Item className={styles.Item} value={option.radioName} id={option.id}>\r\n            <RadioGroup.Indicator className={styles.Indicator} />\r\n          </RadioGroup.Item>\r\n          <label className={styles.Label} htmlFor={option.id}>\r\n            {option.radioName}\r\n          </label>\r\n        </div>\r\n      ))}\r\n  </RadioGroup.Root>\r\n)\r\n","import { ReactElement } from 'react'\r\nimport ReCAPTCHA from 'react-google-recaptcha'\r\n\r\nimport { clsx } from 'clsx'\r\n\r\nimport styles from './ReCaptcha.module.scss'\r\n\r\ntype Props = {\r\n  /** **Required**: Tracks if captcha verification was completed successfully */\r\n  isCaptchaPassed: boolean\r\n  /** **Required**: Callback that receives the verification token string */\r\n  setCaptchaToken: (token: string) => void\r\n  siteKey: string\r\n}\r\n\r\n/**\r\n * ReCaptcha component that integrates Google reCAPTCHA v2\r\n * @component\r\n * @param {Object} props - Component props\r\n * @param {boolean} props.isCaptchaPassed - Flag indicating if captcha was successfully passed\r\n * @param {function(string): void} props.setCaptchaToken - Callback function to set the captcha token\r\n * @returns {JSX.Element} - Rendered reCAPTCHA component\r\n *\r\n * @example\r\n * // Basic usage\r\n * <ReCaptcha\r\n *   isCaptchaPassed={isVerified}\r\n *   setCaptchaToken={(token) => setToken(token)}\r\n * />\r\n */\r\n\r\nexport const ReCaptcha = ({ isCaptchaPassed, setCaptchaToken, siteKey, ...rest }: Props): ReactElement => {\r\n  const submitHandler = (token: string | null) => {\r\n    if (isCaptchaPassed && token) {\r\n      setCaptchaToken(token)\r\n    }\r\n  }\r\n\r\n  const classNames = clsx(styles.reCaptchaWrapper, !isCaptchaPassed && styles.reCaptchaError)\r\n\r\n  return (\r\n    <div className={classNames}>\r\n      <ReCAPTCHA\r\n        sitekey={siteKey}\r\n        onChange={submitHandler}\r\n        theme={'dark'}\r\n        {...rest}\r\n      />\r\n      {!isCaptchaPassed && (\r\n        <span className={styles.reCaptchaText}>Please verify that you are not a robot</span>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n","import { ComponentPropsWithoutRef, ElementType } from 'react'\r\n\r\nimport { clsx } from 'clsx'\r\n\r\nimport s from './textArea.module.scss'\r\n\r\nexport const textAreaVariant = ['default']\r\n\r\nexport type TextAreaVariant = (typeof textAreaVariant)[number]\r\n\r\nexport type TextAreaProps<T extends ElementType = 'textarea'> = {\r\n  /**\r\n   * Custom component or HTML element to render instead of the default 'textarea'.\r\n   * Useful for styling or using a wrapper component.\r\n   */\r\n  as?: T\r\n  /**\r\n   * Visual style variant for the TextArea (e.g. 'default', etc.).\r\n   */\r\n  variant?: TextAreaVariant\r\n  /**\r\n   * Label text displayed above the TextArea.\r\n   */\r\n  label?: string\r\n  /**\r\n   * If true, displays the component in an error state.\r\n   */\r\n  error?: boolean\r\n  /**\r\n   * Error message shown below the TextArea when `error` is true.\r\n   */\r\n  errorText?: string\r\n  /**\r\n   * If true, makes the TextArea take up the full width of its container.\r\n   */\r\n  fullWidth?: boolean\r\n  /**\r\n   * **Required**: ID for Text area.\r\n   */\r\n  id: string\r\n  asChild?: boolean\r\n} & ComponentPropsWithoutRef<T>\r\n\r\nexport const TextAreaComponent = <T extends ElementType = 'textarea'>(props: TextAreaProps<T>) => {\r\n  const {\r\n    className,\r\n    variant = 'default',\r\n    label,\r\n    error,\r\n    errorText,\r\n    disabled = false,\r\n    fullWidth = false,\r\n    id,\r\n    ...rest\r\n  } = props\r\n\r\n  const classNames = clsx(\r\n    s.textArea,\r\n    error ? s.error : s[variant],\r\n    disabled && s.disabled,\r\n    fullWidth && s.fullWidth,\r\n    className\r\n  )\r\n\r\n  return (\r\n    <div className={s.bodyTextArea}>\r\n      {label && (\r\n        <label className={s.label} htmlFor={id}>\r\n          {label}\r\n        </label>\r\n      )}\r\n      <textarea className={classNames} disabled={disabled} id={id} {...rest} />\r\n      {error && errorText && <div className={s.errorText}>{errorText}</div>}\r\n    </div>\r\n  )\r\n}\r\n","export function buildFormatLongFn(args) {\n  return (options = {}) => {\n    // TODO: Remove String()\n    const width = options.width ? String(options.width) : args.defaultWidth;\n    const format = args.formats[width] || args.formats[args.defaultWidth];\n    return format;\n  };\n}\n","/**\n * The localize function argument callback which allows to convert raw value to\n * the actual type.\n *\n * @param value - The value to convert\n *\n * @returns The converted value\n */\n\n/**\n * The map of localized values for each width.\n */\n\n/**\n * The index type of the locale unit value. It types conversion of units of\n * values that don't start at 0 (i.e. quarters).\n */\n\n/**\n * Converts the unit value to the tuple of values.\n */\n\n/**\n * The tuple of localized era values. The first element represents BC,\n * the second element represents AD.\n */\n\n/**\n * The tuple of localized quarter values. The first element represents Q1.\n */\n\n/**\n * The tuple of localized day values. The first element represents Sunday.\n */\n\n/**\n * The tuple of localized month values. The first element represents January.\n */\n\nexport function buildLocalizeFn(args) {\n  return (value, options) => {\n    const context = options?.context ? String(options.context) : \"standalone\";\n\n    let valuesArray;\n    if (context === \"formatting\" && args.formattingValues) {\n      const defaultWidth = args.defaultFormattingWidth || args.defaultWidth;\n      const width = options?.width ? String(options.width) : defaultWidth;\n\n      valuesArray =\n        args.formattingValues[width] || args.formattingValues[defaultWidth];\n    } else {\n      const defaultWidth = args.defaultWidth;\n      const width = options?.width ? String(options.width) : args.defaultWidth;\n\n      valuesArray = args.values[width] || args.values[defaultWidth];\n    }\n    const index = args.argumentCallback ? args.argumentCallback(value) : value;\n\n    // @ts-expect-error - For some reason TypeScript just don't want to match it, no matter how hard we try. I challenge you to try to remove it!\n    return valuesArray[index];\n  };\n}\n","export function buildMatchFn(args) {\n  return (string, options = {}) => {\n    const width = options.width;\n\n    const matchPattern =\n      (width && args.matchPatterns[width]) ||\n      args.matchPatterns[args.defaultMatchWidth];\n    const matchResult = string.match(matchPattern);\n\n    if (!matchResult) {\n      return null;\n    }\n    const matchedString = matchResult[0];\n\n    const parsePatterns =\n      (width && args.parsePatterns[width]) ||\n      args.parsePatterns[args.defaultParseWidth];\n\n    const key = Array.isArray(parsePatterns)\n      ? findIndex(parsePatterns, (pattern) => pattern.test(matchedString))\n      : // [TODO] -- I challenge you to fix the type\n        findKey(parsePatterns, (pattern) => pattern.test(matchedString));\n\n    let value;\n\n    value = args.valueCallback ? args.valueCallback(key) : key;\n    value = options.valueCallback\n      ? // [TODO] -- I challenge you to fix the type\n        options.valueCallback(value)\n      : value;\n\n    const rest = string.slice(matchedString.length);\n\n    return { value, rest };\n  };\n}\n\nfunction findKey(object, predicate) {\n  for (const key in object) {\n    if (\n      Object.prototype.hasOwnProperty.call(object, key) &&\n      predicate(object[key])\n    ) {\n      return key;\n    }\n  }\n  return undefined;\n}\n\nfunction findIndex(array, predicate) {\n  for (let key = 0; key < array.length; key++) {\n    if (predicate(array[key])) {\n      return key;\n    }\n  }\n  return undefined;\n}\n","export function buildMatchPatternFn(args) {\n  return (string, options = {}) => {\n    const matchResult = string.match(args.matchPattern);\n    if (!matchResult) return null;\n    const matchedString = matchResult[0];\n\n    const parseResult = string.match(args.parsePattern);\n    if (!parseResult) return null;\n    let value = args.valueCallback\n      ? args.valueCallback(parseResult[0])\n      : parseResult[0];\n\n    // [TODO] I challenge you to fix the type\n    value = options.valueCallback ? options.valueCallback(value) : value;\n\n    const rest = string.slice(matchedString.length);\n\n    return { value, rest };\n  };\n}\n","const formatDistanceLocale = {\n  lessThanXSeconds: {\n    one: \"less than a second\",\n    other: \"less than {{count}} seconds\",\n  },\n\n  xSeconds: {\n    one: \"1 second\",\n    other: \"{{count}} seconds\",\n  },\n\n  halfAMinute: \"half a minute\",\n\n  lessThanXMinutes: {\n    one: \"less than a minute\",\n    other: \"less than {{count}} minutes\",\n  },\n\n  xMinutes: {\n    one: \"1 minute\",\n    other: \"{{count}} minutes\",\n  },\n\n  aboutXHours: {\n    one: \"about 1 hour\",\n    other: \"about {{count}} hours\",\n  },\n\n  xHours: {\n    one: \"1 hour\",\n    other: \"{{count}} hours\",\n  },\n\n  xDays: {\n    one: \"1 day\",\n    other: \"{{count}} days\",\n  },\n\n  aboutXWeeks: {\n    one: \"about 1 week\",\n    other: \"about {{count}} weeks\",\n  },\n\n  xWeeks: {\n    one: \"1 week\",\n    other: \"{{count}} weeks\",\n  },\n\n  aboutXMonths: {\n    one: \"about 1 month\",\n    other: \"about {{count}} months\",\n  },\n\n  xMonths: {\n    one: \"1 month\",\n    other: \"{{count}} months\",\n  },\n\n  aboutXYears: {\n    one: \"about 1 year\",\n    other: \"about {{count}} years\",\n  },\n\n  xYears: {\n    one: \"1 year\",\n    other: \"{{count}} years\",\n  },\n\n  overXYears: {\n    one: \"over 1 year\",\n    other: \"over {{count}} years\",\n  },\n\n  almostXYears: {\n    one: \"almost 1 year\",\n    other: \"almost {{count}} years\",\n  },\n};\n\nexport const formatDistance = (token, count, options) => {\n  let result;\n\n  const tokenValue = formatDistanceLocale[token];\n  if (typeof tokenValue === \"string\") {\n    result = tokenValue;\n  } else if (count === 1) {\n    result = tokenValue.one;\n  } else {\n    result = tokenValue.other.replace(\"{{count}}\", count.toString());\n  }\n\n  if (options?.addSuffix) {\n    if (options.comparison && options.comparison > 0) {\n      return \"in \" + result;\n    } else {\n      return result + \" ago\";\n    }\n  }\n\n  return result;\n};\n","const formatRelativeLocale = {\n  lastWeek: \"'last' eeee 'at' p\",\n  yesterday: \"'yesterday at' p\",\n  today: \"'today at' p\",\n  tomorrow: \"'tomorrow at' p\",\n  nextWeek: \"eeee 'at' p\",\n  other: \"P\",\n};\n\nexport const formatRelative = (token, _date, _baseDate, _options) =>\n  formatRelativeLocale[token];\n","import { buildLocalizeFn } from \"../../_lib/buildLocalizeFn.js\";\n\nconst eraValues = {\n  narrow: [\"B\", \"A\"],\n  abbreviated: [\"BC\", \"AD\"],\n  wide: [\"Before Christ\", \"Anno Domini\"],\n};\n\nconst quarterValues = {\n  narrow: [\"1\", \"2\", \"3\", \"4\"],\n  abbreviated: [\"Q1\", \"Q2\", \"Q3\", \"Q4\"],\n  wide: [\"1st quarter\", \"2nd quarter\", \"3rd quarter\", \"4th quarter\"],\n};\n\n// Note: in English, the names of days of the week and months are capitalized.\n// If you are making a new locale based on this one, check if the same is true for the language you're working on.\n// Generally, formatted dates should look like they are in the middle of a sentence,\n// e.g. in Spanish language the weekdays and months should be in the lowercase.\nconst monthValues = {\n  narrow: [\"J\", \"F\", \"M\", \"A\", \"M\", \"J\", \"J\", \"A\", \"S\", \"O\", \"N\", \"D\"],\n  abbreviated: [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\",\n  ],\n\n  wide: [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ],\n};\n\nconst dayValues = {\n  narrow: [\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"],\n  short: [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"],\n  abbreviated: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n  wide: [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n  ],\n};\n\nconst dayPeriodValues = {\n  narrow: {\n    am: \"a\",\n    pm: \"p\",\n    midnight: \"mi\",\n    noon: \"n\",\n    morning: \"morning\",\n    afternoon: \"afternoon\",\n    evening: \"evening\",\n    night: \"night\",\n  },\n  abbreviated: {\n    am: \"AM\",\n    pm: \"PM\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"morning\",\n    afternoon: \"afternoon\",\n    evening: \"evening\",\n    night: \"night\",\n  },\n  wide: {\n    am: \"a.m.\",\n    pm: \"p.m.\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"morning\",\n    afternoon: \"afternoon\",\n    evening: \"evening\",\n    night: \"night\",\n  },\n};\n\nconst formattingDayPeriodValues = {\n  narrow: {\n    am: \"a\",\n    pm: \"p\",\n    midnight: \"mi\",\n    noon: \"n\",\n    morning: \"in the morning\",\n    afternoon: \"in the afternoon\",\n    evening: \"in the evening\",\n    night: \"at night\",\n  },\n  abbreviated: {\n    am: \"AM\",\n    pm: \"PM\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"in the morning\",\n    afternoon: \"in the afternoon\",\n    evening: \"in the evening\",\n    night: \"at night\",\n  },\n  wide: {\n    am: \"a.m.\",\n    pm: \"p.m.\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"in the morning\",\n    afternoon: \"in the afternoon\",\n    evening: \"in the evening\",\n    night: \"at night\",\n  },\n};\n\nconst ordinalNumber = (dirtyNumber, _options) => {\n  const number = Number(dirtyNumber);\n\n  // If ordinal numbers depend on context, for example,\n  // if they are different for different grammatical genders,\n  // use `options.unit`.\n  //\n  // `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',\n  // 'day', 'hour', 'minute', 'second'.\n\n  const rem100 = number % 100;\n  if (rem100 > 20 || rem100 < 10) {\n    switch (rem100 % 10) {\n      case 1:\n        return number + \"st\";\n      case 2:\n        return number + \"nd\";\n      case 3:\n        return number + \"rd\";\n    }\n  }\n  return number + \"th\";\n};\n\nexport const localize = {\n  ordinalNumber,\n\n  era: buildLocalizeFn({\n    values: eraValues,\n    defaultWidth: \"wide\",\n  }),\n\n  quarter: buildLocalizeFn({\n    values: quarterValues,\n    defaultWidth: \"wide\",\n    argumentCallback: (quarter) => quarter - 1,\n  }),\n\n  month: buildLocalizeFn({\n    values: monthValues,\n    defaultWidth: \"wide\",\n  }),\n\n  day: buildLocalizeFn({\n    values: dayValues,\n    defaultWidth: \"wide\",\n  }),\n\n  dayPeriod: buildLocalizeFn({\n    values: dayPeriodValues,\n    defaultWidth: \"wide\",\n    formattingValues: formattingDayPeriodValues,\n    defaultFormattingWidth: \"wide\",\n  }),\n};\n","import { buildMatchFn } from \"../../_lib/buildMatchFn.js\";\nimport { buildMatchPatternFn } from \"../../_lib/buildMatchPatternFn.js\";\n\nconst matchOrdinalNumberPattern = /^(\\d+)(th|st|nd|rd)?/i;\nconst parseOrdinalNumberPattern = /\\d+/i;\n\nconst matchEraPatterns = {\n  narrow: /^(b|a)/i,\n  abbreviated: /^(b\\.?\\s?c\\.?|b\\.?\\s?c\\.?\\s?e\\.?|a\\.?\\s?d\\.?|c\\.?\\s?e\\.?)/i,\n  wide: /^(before christ|before common era|anno domini|common era)/i,\n};\nconst parseEraPatterns = {\n  any: [/^b/i, /^(a|c)/i],\n};\n\nconst matchQuarterPatterns = {\n  narrow: /^[1234]/i,\n  abbreviated: /^q[1234]/i,\n  wide: /^[1234](th|st|nd|rd)? quarter/i,\n};\nconst parseQuarterPatterns = {\n  any: [/1/i, /2/i, /3/i, /4/i],\n};\n\nconst matchMonthPatterns = {\n  narrow: /^[jfmasond]/i,\n  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,\n  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i,\n};\nconst parseMonthPatterns = {\n  narrow: [\n    /^j/i,\n    /^f/i,\n    /^m/i,\n    /^a/i,\n    /^m/i,\n    /^j/i,\n    /^j/i,\n    /^a/i,\n    /^s/i,\n    /^o/i,\n    /^n/i,\n    /^d/i,\n  ],\n\n  any: [\n    /^ja/i,\n    /^f/i,\n    /^mar/i,\n    /^ap/i,\n    /^may/i,\n    /^jun/i,\n    /^jul/i,\n    /^au/i,\n    /^s/i,\n    /^o/i,\n    /^n/i,\n    /^d/i,\n  ],\n};\n\nconst matchDayPatterns = {\n  narrow: /^[smtwf]/i,\n  short: /^(su|mo|tu|we|th|fr|sa)/i,\n  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,\n  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i,\n};\nconst parseDayPatterns = {\n  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],\n  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i],\n};\n\nconst matchDayPeriodPatterns = {\n  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,\n  any: /^([ap]\\.?\\s?m\\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i,\n};\nconst parseDayPeriodPatterns = {\n  any: {\n    am: /^a/i,\n    pm: /^p/i,\n    midnight: /^mi/i,\n    noon: /^no/i,\n    morning: /morning/i,\n    afternoon: /afternoon/i,\n    evening: /evening/i,\n    night: /night/i,\n  },\n};\n\nexport const match = {\n  ordinalNumber: buildMatchPatternFn({\n    matchPattern: matchOrdinalNumberPattern,\n    parsePattern: parseOrdinalNumberPattern,\n    valueCallback: (value) => parseInt(value, 10),\n  }),\n\n  era: buildMatchFn({\n    matchPatterns: matchEraPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseEraPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  quarter: buildMatchFn({\n    matchPatterns: matchQuarterPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseQuarterPatterns,\n    defaultParseWidth: \"any\",\n    valueCallback: (index) => index + 1,\n  }),\n\n  month: buildMatchFn({\n    matchPatterns: matchMonthPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseMonthPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  day: buildMatchFn({\n    matchPatterns: matchDayPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseDayPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  dayPeriod: buildMatchFn({\n    matchPatterns: matchDayPeriodPatterns,\n    defaultMatchWidth: \"any\",\n    parsePatterns: parseDayPeriodPatterns,\n    defaultParseWidth: \"any\",\n  }),\n};\n","import { buildFormatLongFn } from \"../../_lib/buildFormatLongFn.js\";\n\nconst dateFormats = {\n  full: \"EEEE, d MMMM yyyy\",\n  long: \"d MMMM yyyy\",\n  medium: \"d MMM yyyy\",\n  short: \"dd/MM/yyyy\",\n};\n\nconst timeFormats = {\n  full: \"HH:mm:ss zzzz\",\n  long: \"HH:mm:ss z\",\n  medium: \"HH:mm:ss\",\n  short: \"HH:mm\",\n};\n\nconst dateTimeFormats = {\n  full: \"{{date}} 'at' {{time}}\",\n  long: \"{{date}} 'at' {{time}}\",\n  medium: \"{{date}}, {{time}}\",\n  short: \"{{date}}, {{time}}\",\n};\n\nexport const formatLong = {\n  date: buildFormatLongFn({\n    formats: dateFormats,\n    defaultWidth: \"full\",\n  }),\n\n  time: buildFormatLongFn({\n    formats: timeFormats,\n    defaultWidth: \"full\",\n  }),\n\n  dateTime: buildFormatLongFn({\n    formats: dateTimeFormats,\n    defaultWidth: \"full\",\n  }),\n};\n","import { formatDistance } from \"./en-US/_lib/formatDistance.js\";\nimport { formatRelative } from \"./en-US/_lib/formatRelative.js\";\nimport { localize } from \"./en-US/_lib/localize.js\";\nimport { match } from \"./en-US/_lib/match.js\";\n\nimport { formatLong } from \"./en-GB/_lib/formatLong.js\";\n\n/**\n * @category Locales\n * @summary English locale (United Kingdom).\n * @language English\n * @iso-639-2 eng\n * @author Alex [@glintik](https://github.com/glintik)\n */\nexport const enGB = {\n  code: \"en-GB\",\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 1 /* Monday */,\n    firstWeekContainsDate: 4,\n  },\n};\n\n// Fallback for modularized imports:\nexport default enGB;\n","import { DayPicker, type DateRange } from 'react-day-picker'\r\nimport 'react-day-picker/dist/style.css'\r\nimport s from './datePicker.module.scss'\r\nimport { enGB } from 'date-fns/locale'\r\n\r\ntype CalendarProps = {\r\n  value?: DateRange | undefined\r\n  onChange?: (range: DateRange | undefined) => void\r\n}\r\n\r\nexport const Calendar = ({ value, onChange, ...rest }: CalendarProps) => {\r\n  const modifiers = {\r\n    weekend: (date: Date) => [0, 6].includes(date.getDay()),\r\n  }\r\n\r\n  return (\r\n    <DayPicker\r\n      className={s.datePicker__calendar}\r\n      classNames={{\r\n        caption_label: s.captionLabel,\r\n        day: s.day,\r\n        weekdays: s.weekdays,\r\n        weekday: s.weekday,\r\n        nav_button: s.navButton,\r\n        chevron: s.chevron,\r\n      }}\r\n      modifiersClassNames={{\r\n        selected: s.selected,\r\n        today: s.today,\r\n        weekend: s.weekend,\r\n        range_start: s.rangeStart,\r\n        range_end: s.rangeEnd,\r\n      }}\r\n      modifiers={modifiers}\r\n      locale={enGB}\r\n      animate\r\n      fixedWeeks\r\n      showOutsideDays\r\n      mode=\"range\"\r\n      selected={value}\r\n      onSelect={onChange}\r\n      required\r\n      // disabled={{ before: new Date() }}\r\n      {...rest}\r\n    />\r\n  )\r\n}\r\n","import { format } from 'date-fns'\r\nimport { UniversalIcon } from '@/components'\r\nimport s from './datePicker.module.scss'\r\nimport { Calendar } from './Calendar'\r\nimport { Popover } from 'radix-ui'\r\nimport { useState } from 'react'\r\nimport { DateRange } from 'react-day-picker'\r\n\r\ntype Props = {\r\n  /** Initial value */\r\n  value: DateRange | undefined\r\n  /** Label displayed above the select input */\r\n  label: string\r\n  /** Callback called when a date is selected */\r\n  onChange?: (range: DateRange | undefined) => void\r\n  /** Disables the select input */\r\n  disabled?: boolean\r\n  /** Shows the error status */\r\n  hasError?: boolean\r\n  /** Shows the error status Error message under the component if `hasError` = true */\r\n  errorText?: string\r\n  /** If true, the input to the full width of its container */\r\n  fullWidth?: boolean\r\n}\r\n\r\nexport const DatePicker = ({\r\n  value,\r\n  label,\r\n  onChange,\r\n  hasError,\r\n  errorText,\r\n  disabled = false,\r\n  fullWidth = false,\r\n}: Props) => {\r\n  const inputId = 'datepicker-trigger'\r\n  const [open, setOpen] = useState(false)\r\n\r\n  const getDisplayValue = (range?: DateRange) => {\r\n    if (!range?.from) return format(new Date(), 'dd/MM/yyyy')\r\n    if (!range.to || range.from.getTime() === range.to.getTime()) {\r\n      return format(range.from, 'dd/MM/yyyy')\r\n    }\r\n    return `${format(range.from, 'dd/MM/yyyy')} - ${format(range.to, 'dd/MM/yyyy')}`\r\n  }\r\n\r\n  const triggerClass = [\r\n    s.datePicker__trigger,\r\n    fullWidth && s.fullWidth,\r\n    disabled && s.disabled,\r\n    hasError && s['datePicker__trigger--error'],\r\n    open && s['datePicker__trigger--open'],\r\n    disabled && s['datePicker__trigger--disabled'],\r\n  ]\r\n    .filter(Boolean)\r\n    .join(' ')\r\n\r\n  return (\r\n    <div className={s.datePicker}>\r\n      <label htmlFor={inputId} className={s.datePicker__label}>\r\n        {label}\r\n      </label>\r\n      <Popover.Root open={open} onOpenChange={setOpen}>\r\n        <Popover.Trigger\r\n          onClick={() => setOpen(!open)}\r\n          id={inputId}\r\n          className={triggerClass}\r\n          disabled={disabled}\r\n          aria-label={label}\r\n          aria-invalid={hasError || undefined}\r\n          aria-describedby={hasError && errorText ? `${inputId}-error` : undefined}\r\n        >\r\n          <span className={s.datePicker__dateValue}>{getDisplayValue(value)}</span>\r\n          <div className={s.datePicker__icon}>\r\n            {open ? (\r\n              <UniversalIcon name={'calendar'} />\r\n            ) : (\r\n              <UniversalIcon name={'calendar-outline'} />\r\n            )}\r\n          </div>\r\n        </Popover.Trigger>\r\n\r\n        <Popover.Content\r\n          className={s.datePicker__popover}\r\n          sideOffset={1}\r\n          align=\"start\"\r\n          side=\"bottom\"\r\n        >\r\n          <Calendar value={value} onChange={onChange} />\r\n        </Popover.Content>\r\n      </Popover.Root>\r\n\r\n      {hasError && errorText && (\r\n        <span id={`${inputId}-error`} className={s.datePicker__errorText} role=\"alert\">\r\n          {errorText}\r\n        </span>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n","import { Tabs } from 'radix-ui'\r\nimport s from './tabs.module.scss'\r\nimport { clsx } from 'clsx'\r\nimport type { ReactNode } from 'react'\r\n\r\ntype Tab = {\r\n  /** id current tab (for example: \"tab1\") */\r\n  id: string\r\n  /**  The content of the tab   */\r\n  label: ReactNode\r\n  /** Disabled Tab */\r\n  disabled?: boolean\r\n}\r\n\r\ntype Props = {\r\n  tabs: Tab[]\r\n  /** id current tab (for example: \"tab1\") */\r\n  value: Tab['id']\r\n  /** Change active tab */\r\n  onValueChange: (val: Tab['id']) => void\r\n  /** * If true, the tab stretches to the full width of its container.  */\r\n  fullWidth?: boolean\r\n  /** any children, for example <Tabs.Content /> */\r\n  children?: ReactNode\r\n}\r\n\r\nexport const TabsComponent = ({\r\n  tabs,\r\n  value,\r\n  onValueChange,\r\n  fullWidth = false,\r\n  children,\r\n}: Props) => {\r\n  return (\r\n    <Tabs.Root value={value} onValueChange={onValueChange} className={s.root}>\r\n      <Tabs.List className={s.list}>\r\n        {tabs.map(({ id, label, disabled }) => (\r\n          <Tabs.Trigger\r\n            key={id}\r\n            value={id}\r\n            disabled={disabled}\r\n            className={clsx(s.trigger, fullWidth && s.fullWidth)}\r\n          >\r\n            {label}\r\n          </Tabs.Trigger>\r\n        ))}\r\n      </Tabs.List>\r\n      {tabs.map(({ id }) => (\r\n        <Tabs.Content key={id} value={id}>\r\n          {children}\r\n        </Tabs.Content>\r\n      ))}\r\n    </Tabs.Root>\r\n  )\r\n}\r\n","import {clsx} from \"clsx\";\r\nimport s from './pagination.module.scss'\r\n\r\ntype PaginationConditionals =\r\n    | {\r\n    onPerPageChange: (itemPerPage: number) => void\r\n    perPage: number\r\n    perPageOptions: number[]\r\n}\r\n    | {\r\n    onPerPageChange?: never\r\n    perPage?: null\r\n    perPageOptions?: never\r\n}\r\n\r\nexport type PaginationProps = {\r\n    count: number\r\n    onChange: (page: number) => void\r\n    onPerPageChange?: (itemPerPage: number) => void\r\n    page: number\r\n    perPage?: number\r\n    perPageOptions?: number[]\r\n    siblings?: number\r\n} & PaginationConditionals\r\n\r\nexport const classNames = {\r\n    container: s.container,\r\n    dots: s.dots,\r\n    icon: s.icon,\r\n    item: s.item,\r\n    pageButton(selected?: boolean) {\r\n        return clsx(this.item, selected && s.selected)\r\n    },\r\n    root: s.root,\r\n    select: s.select,\r\n    selectBox: s.selectBox,\r\n}\r\n\r\nexport type MainPaginationButtonsProps = {\r\n    currentPage: number\r\n    onClick: (pageNumber: number) => () => void\r\n    paginationRange: (number | string)[]\r\n}\r\n\r\nexport type NavigationButtonProps = {\r\n    disabled?: boolean\r\n    onClick: () => void\r\n    size?: number\r\n}\r\n\r\nexport type PageButtonProps = NavigationButtonProps & {\r\n    page: number\r\n    selected: boolean\r\n}\r\n\r\nexport type PerPageSelectProps = {\r\n    onPerPageChange: (itemPerPage: number) => void\r\n    perPage: number\r\n    perPageOptions: number[]\r\n}","import {FC} from \"react\";\r\nimport {UniversalIcon} from \"@/components\";\r\nimport {classNames, NavigationButtonProps} from \"@/components/pagination/paginationTypes\";\r\n\r\nexport const  PrevButton: FC<NavigationButtonProps> = ({disabled, onClick, size}) => {\r\n    return(\r\n        <button className={classNames.item} disabled={disabled} onClick={onClick}>\r\n            <UniversalIcon className={classNames.icon} name={'arrow-ios-back'} size={size}/>\r\n        </button>\r\n    )\r\n}","import {FC} from \"react\";\r\nimport {UniversalIcon} from \"@/components\";\r\nimport {classNames, NavigationButtonProps} from \"@/components/pagination/paginationTypes\";\r\n\r\nexport const NextButton:FC<NavigationButtonProps>= ({disabled, onClick, size}) => {\r\n    return (\r\n        <button className={classNames.item} disabled={disabled} onClick={onClick}>\r\n            <UniversalIcon className={classNames.icon} name={\"arrow-ios-forward\"} size={size}/>\r\n        </button>\r\n    )\r\n}","import {FC} from \"react\";\r\nimport {classNames, PageButtonProps} from \"@/components/pagination/paginationTypes\";\r\n\r\nexport const PageButton: FC<PageButtonProps> = ({disabled, onClick, page, selected}) => {\r\n    return (\r\n        <button className={\r\n                classNames.pageButton(selected)}\r\n                disabled={selected || disabled}\r\n                onClick={onClick}\r\n                type={\"button\"}\r\n        >\r\n            {page}\r\n        </button>\r\n    )\r\n};","import {FC} from \"react\";\r\nimport {classNames} from \"@/components/pagination/paginationTypes\";\r\n\r\nexport const Dots: FC = () => {\r\n    return (\r\n        <span className={classNames.dots}>&#8230;</span>\r\n    )\r\n}","import {FC} from \"react\";\r\nimport {MainPaginationButtonsProps} from \"@/components/pagination/paginationTypes\";\r\nimport {PageButton} from \"@/components/pagination/buttonsGroup/PageButton\";\r\nimport {Dots} from \"@/components/pagination/buttonsGroup/Dots\";\r\n\r\nexport const MainPaginationButtons: FC<MainPaginationButtonsProps> = ({ currentPage, onClick, paginationRange }) => {\r\n    return (\r\n        <>\r\n            {paginationRange.map((page: number | string, index) => {\r\n                const isSelected = page === currentPage\r\n                if (typeof page !== 'number') {\r\n                    return <Dots key={index} />\r\n                }\r\n                return <PageButton key={index} onClick={onClick(page)} page={page} selected={isSelected} />\r\n            })}\r\n        </>\r\n    )\r\n}","import {useCallback, useMemo} from \"react\";\r\n\r\n//создаёт массив чисел от start до end включительно.\r\nconst range = (start: number, end: number) => {\r\n    const length = end - start + 1\r\n\r\n    return Array.from({ length }, (_, idx) => idx + start)\r\n}\r\n\r\nconst DOTS = '...'\r\n\r\ntype UsePaginationParamType = {\r\n    count: number                           // всего страниц\r\n    onChange: (pageNumber: number) => void  // функция смены страницы\r\n    page: number                            // текущая страница\r\n    siblings?: number                       // сколько \"соседних\" страниц показывать рядом с текущей\r\n}\r\n\r\ntype PaginationRange = ('...' | number)[]\r\n\r\nexport const usePagination = ({ count, onChange, page, siblings = 1 }: UsePaginationParamType) => {\r\n    const paginationRange = useMemo(() => {\r\n\r\n        // Это максимум страниц, которые мы хотим отрисовать без сокращения (текущая, первый, последний, и по одному \"соседу\" с каждой стороны + 2 точки).\r\n        const totalPageNumbers = siblings + 5\r\n\r\n        //case 1: Если страниц мало (влезают все)\r\n        if (totalPageNumbers >= count) {\r\n            return range(1, count)\r\n        }\r\n\r\n        //Рассчитайте левый и правый индексы родственных элементов и убедитесь, что они находятся в пределах диапазона 1 и totalPageCount.\r\n        const leftSiblingIndex = Math.max(page - siblings, 1)\r\n        const rightSiblingIndex = Math.min(page + siblings, count)\r\n\r\n        // Мы не отображаем точки, когда нужно вставить только один номер страницы\r\n        // между крайними значениями одноуровневых элементов и ограничениями количества страниц, то есть 1 и totalPageCount.\r\n        // Поэтому мы используем leftSiblingIndex > 2 и rightSiblingIndex < totalPageCount - 2.\r\n        const shouldShowLeftDots = leftSiblingIndex > 2\r\n        const shouldShowRightDots = rightSiblingIndex < count - 2\r\n\r\n        const firstPageIndex = 1\r\n        const lastPageIndex = count\r\n\r\n        //Case 2: Слева нет точек, но справа есть:\r\n        if (!shouldShowLeftDots && shouldShowRightDots) {\r\n            const leftItemCount = 3 + 2 * siblings\r\n            const leftRange = range(1, leftItemCount)\r\n\r\n            return [...leftRange, DOTS, count]\r\n        }\r\n\r\n        //case 3: Справа нет точек, но слева есть:\r\n        if (shouldShowLeftDots && !shouldShowRightDots) {\r\n            const rightItemCount = 3 + 2 * siblings\r\n            const rightRange = range(count - rightItemCount + 1, count)\r\n\r\n            return [firstPageIndex, DOTS, ...rightRange]\r\n        }\r\n        //case 4: Точки с обеих сторон:\r\n        if (shouldShowLeftDots && shouldShowRightDots) {\r\n            const middleRange = range(leftSiblingIndex, rightSiblingIndex)\r\n\r\n            return [firstPageIndex, DOTS, ...middleRange, DOTS, lastPageIndex]\r\n        }\r\n    }, [siblings, page, count]) as PaginationRange\r\n\r\n    const lastPage = paginationRange.at(-1)\r\n\r\n    const isFirstPage = page === 1\r\n    const isLastPage = page === lastPage\r\n\r\n    const handleNextPageClicked = useCallback(() => {\r\n        onChange(page + 1)\r\n    }, [page, onChange])\r\n\r\n    const handlePreviousPageClicked = useCallback(() => {\r\n        onChange(page - 1)\r\n    }, [page, onChange])\r\n\r\n    function handleMainPageClicked(pageNumber: number) {\r\n        return () => onChange(pageNumber)\r\n    }\r\n\r\n    return {\r\n        paginationRange,            // список номеров и \"...\" для отрисовки\r\n        handleMainPageClicked,      // клик по номеру страницы\r\n        handleNextPageClicked,      // клик \"вперёд\"\r\n        handlePreviousPageClicked,  // клик \"назад\"\r\n        isFirstPage,                // текущая — первая?\r\n        isLastPage                  // текущая — последняя?\r\n    }\r\n}","import {FC} from \"react\";\r\nimport {classNames, PerPageSelectProps} from \"@/components/pagination/paginationTypes\";\r\nimport {Selectbox} from \"@/components\";\r\n\r\nexport const PerPageSelect: FC<PerPageSelectProps> = ({onPerPageChange, perPage, perPageOptions}) => {\r\n    const selectOptions = perPageOptions.map(value => ({\r\n        label: value.toString(),\r\n        value,\r\n    }))\r\n\r\n    return (\r\n        <div className={classNames.selectBox}>\r\n            Show\r\n            <Selectbox\r\n                variant={'pagination'}\r\n                className={classNames.selectBox}\r\n                onValueChange={(val) => onPerPageChange(Number(val))}\r\n                options={selectOptions}\r\n                value={perPage}\r\n            />\r\n            on page\r\n        </div>\r\n    )\r\n}\r\n\r\n","import {FC} from \"react\";\r\nimport {PrevButton} from \"@/components/pagination/buttonsGroup/PrevButton\";\r\nimport {NextButton} from \"@/components/pagination/buttonsGroup/NextButton\";\r\nimport {classNames, PaginationProps} from \"@/components/pagination/paginationTypes\";\r\nimport {MainPaginationButtons} from \"@/components/pagination/buttonsGroup/MainPaginationButtons\";\r\nimport {usePagination} from \"@/components/pagination/usePagination\";\r\nimport {PerPageSelect} from \"@/components/pagination/PerPageSelect\";\r\n\r\nexport const Pagination: FC<PaginationProps> = ({\r\n                                                    count,\r\n                                                    onChange,\r\n                                                    onPerPageChange,\r\n                                                    page,\r\n                                                    perPage = null,\r\n                                                    perPageOptions,\r\n                                                    siblings,\r\n                                                }) => {\r\n    const {\r\n        handleMainPageClicked,\r\n        handleNextPageClicked,\r\n        handlePreviousPageClicked,\r\n        isFirstPage,\r\n        isLastPage,\r\n        paginationRange,\r\n    } = usePagination({\r\n        count,\r\n        onChange,\r\n        page,\r\n        siblings,\r\n    })\r\n\r\n    const showPerPageSelect = !!perPage && !!perPageOptions && !!onPerPageChange\r\n\r\n    return (\r\n        <div className={classNames.root}>\r\n            <div className={classNames.container}>\r\n                <PrevButton disabled={isFirstPage} onClick={handlePreviousPageClicked} size={16}/>\r\n                <MainPaginationButtons\r\n                    currentPage={page}\r\n                    onClick={handleMainPageClicked}\r\n                    paginationRange={paginationRange}\r\n                />\r\n                <NextButton disabled={isLastPage} onClick={handleNextPageClicked} size={16}/>\r\n            </div>\r\n\r\n            {showPerPageSelect && (\r\n                <PerPageSelect\r\n                    {...{\r\n                        onPerPageChange,\r\n                        perPage,\r\n                        perPageOptions,\r\n                    }}\r\n                />\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\n"],"names":["Alert","children","variant","onClose","withCloseIcon","fullWidth","isOpen","rest","classNames","clsx","s","useEffect","timerId","jsx","jsxs","UniversalIcon","buttonVariant","Button","as","className","Card","size","styles","Checkbox","label","idProp","disabled","props","RadixCheckbox","CheckIcon","SelectItem","React","forwardedRef","Select","name","dataStatic","width","height","svgElement","setSvgElement","res","svgString","options","domNode","el","attribs","key","reactKey","_","letter","parsed","parse","Selectbox","placeholder","value","onValueChange","onOpenChange","selectedOption","opt","ChevronDownIcon","option","Header","isAuth","isProcessingAuth","localization","notificationCount","convertNumber","Fragment","Input","id","inputType","errorText","required","showPassword","setShowPassword","useState","containerClassNames","isPassword","isSearch","isLocation","currentInputType","variants","Radio","defaultValue","RadioGroup","ReCaptcha","isCaptchaPassed","setCaptchaToken","siteKey","submitHandler","token","ReCAPTCHA","textAreaVariant","TextAreaComponent","error","buildFormatLongFn","args","buildLocalizeFn","context","valuesArray","defaultWidth","index","buildMatchFn","string","matchPattern","matchResult","matchedString","parsePatterns","findIndex","pattern","findKey","object","predicate","array","buildMatchPatternFn","parseResult","formatDistanceLocale","formatDistance","count","result","tokenValue","formatRelativeLocale","formatRelative","_date","_baseDate","_options","eraValues","quarterValues","monthValues","dayValues","dayPeriodValues","formattingDayPeriodValues","ordinalNumber","dirtyNumber","number","rem100","localize","quarter","matchOrdinalNumberPattern","parseOrdinalNumberPattern","matchEraPatterns","parseEraPatterns","matchQuarterPatterns","parseQuarterPatterns","matchMonthPatterns","parseMonthPatterns","matchDayPatterns","parseDayPatterns","matchDayPeriodPatterns","parseDayPeriodPatterns","match","dateFormats","timeFormats","dateTimeFormats","formatLong","enGB","Calendar","onChange","modifiers","date","DayPicker","DatePicker","hasError","inputId","open","setOpen","getDisplayValue","range","format","triggerClass","Popover","TabsComponent","tabs","Tabs","selected","PrevButton","onClick","NextButton","PageButton","page","Dots","MainPaginationButtons","currentPage","paginationRange","isSelected","start","end","length","idx","DOTS","usePagination","siblings","useMemo","leftSiblingIndex","rightSiblingIndex","shouldShowLeftDots","shouldShowRightDots","firstPageIndex","lastPageIndex","leftItemCount","rightItemCount","rightRange","middleRange","lastPage","isFirstPage","isLastPage","handleNextPageClicked","useCallback","handlePreviousPageClicked","handleMainPageClicked","pageNumber","PerPageSelect","onPerPageChange","perPage","perPageOptions","selectOptions","val","Pagination","showPerPageSelect"],"mappings":"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","x_google_ignoreList":[12,13,14,15,16,17,18,19,20,21]}