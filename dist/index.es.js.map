{"version":3,"file":"index.es.js","sources":["../src/components/common/unversalIcon/UniversalIcon.tsx","../src/components/alerts/Alerts.tsx","../src/components/button/Button.tsx","../src/components/card/Card.tsx","../src/components/checkbox/Checkbox.tsx","../src/components/selectbox/SelectItem.tsx","../src/components/selectbox/Selectbox.tsx","../src/components/header/Header.tsx","../src/components/input/Input.tsx","../src/components/radio/Radio.tsx","../src/components/reCaptcha/ReCaptcha.tsx","../src/components/textArea/TextArea.tsx"],"sourcesContent":["import React from 'react'\r\n\r\nimport parse from 'html-react-parser'\r\n\r\nexport const UniversalIcon = ({ name }: { name: string }) => {\r\n  const [svgElement, setSvgElement] = React.useState<React.ReactNode>(null)\r\n\r\n  React.useEffect(() => {\r\n    fetch(`/dist/assets/icons/${name}.svg`)\r\n      .then(res => res.text())\r\n      .then(svgString => {\r\n        const parsed = parse(svgString)\r\n\r\n        setSvgElement(parsed)\r\n      })\r\n  }, [name])\r\n\r\n  return svgElement\r\n}\r\n","import { ComponentProps, FC, ReactNode } from 'react'\r\n\r\nimport { clsx } from 'clsx'\r\n\r\nimport s from './alerts.module.scss'\r\n\r\nimport { UniversalIcon } from '../common/unversalIcon/UniversalIcon'\r\n\r\nexport type AlertProps = {\r\n  /**\r\n   * **Required**: The content of the alert (usually text or elements).\r\n   */\r\n  children: ReactNode\r\n  /**\r\n   * Visual variant of the alert. Can be 'success' (green) or 'error' (red).\r\n   * Defaults to no variant styling.\r\n   */\r\n  variant?: 'success' | 'error'\r\n  /**\r\n   * Callback fired when the close button is clicked.\r\n   */\r\n  onClose?: () => void\r\n  /**\r\n   * **Required**: If true, the alert can be closed via a close button.\r\n   */\r\n  closable: boolean\r\n  /**\r\n   * If true, the alert stretches to the full width of its container.\r\n   */\r\n  fullWidth?: boolean\r\n} & ComponentProps<'div'>\r\n\r\nexport const Alert: FC<AlertProps> = ({\r\n  children,\r\n  variant = 'success',\r\n  onClose,\r\n  closable = true,\r\n  fullWidth = false,\r\n  ...rest\r\n}) => {\r\n  const classNames = {\r\n    box: clsx(s.box, variant === 'success' ? s.success : s.error, fullWidth && s.fullWidth),\r\n    content: s.content,\r\n    icon: clsx(s.icon),\r\n  }\r\n\r\n  return (\r\n    <div className={classNames.box} {...rest}>\r\n      <div className={classNames.content}>\r\n        {variant === 'error' ? (\r\n          <div>\r\n            <strong>Error!</strong> {children}\r\n          </div>\r\n        ) : (\r\n          <>{children}</>\r\n        )}\r\n        {closable && (\r\n          <span className={classNames.icon} onClick={onClose}>\r\n            <UniversalIcon name={'close'} />\r\n          </span>\r\n        )}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import { ComponentPropsWithoutRef, ElementType, ReactNode } from 'react'\r\n\r\nimport { clsx } from 'clsx'\r\n\r\nimport s from './button.module.scss'\r\n\r\nexport const buttonVariant = ['primary', 'secondary', 'outline', 'text_button'] as const\r\nexport type ButtonVariant = (typeof buttonVariant)[number]\r\n\r\nexport type ButtonOwnProps<T extends ElementType = 'button'> = {\r\n  /**  * The element or component to render as. For example, 'button', 'a' etc. Default = 'button */\r\n  as?: T\r\n  /**  * Makes the button take up the full width of its container. */\r\n  fullWidth?: boolean\r\n  /**  * Visual style variant of the button.*/\r\n  variant?: ButtonVariant\r\n  /**  * Disables the button.*/\r\n  disabled?: boolean\r\n  /**  **Required**: Button content.*/\r\n  children: ReactNode\r\n}\r\n\r\nexport type ButtonProps<T extends ElementType = 'button'> = ButtonOwnProps<T> &\r\n  Omit<ComponentPropsWithoutRef<T>, keyof ButtonOwnProps<T>>\r\n\r\nexport const Button = <T extends ElementType = 'button'>({\r\n  as,\r\n  children,\r\n  fullWidth = false,\r\n  className,\r\n  variant = 'primary',\r\n  ...rest\r\n}: ButtonProps<T>) => {\r\n  const classNames = clsx(s.button, s[variant], fullWidth && s.fullWidth, className)\r\n  const Component = (as || 'button') as ElementType\r\n\r\n  return (\r\n    <Component className={classNames} {...rest}>\r\n      {children}\r\n    </Component>\r\n  )\r\n}\r\n","import { ReactNode } from 'react';\r\n\r\nimport { clsx } from 'clsx';\r\n\r\nimport styles from './card.module.scss';\r\n\r\ntype cardSize = 'sm' | 'md' | 'lg';\r\n\r\ntype Props = {\r\n  /**\r\n   * Controls the card's padding and font scaling.\r\n   * @default 'md'\r\n   */\r\n  size?: cardSize;\r\n  /**\r\n   * Content to render inside the card.\r\n   * Accepts strings, JSX, arrays, etc.\r\n   */\r\n  children?: ReactNode;\r\n  /**\r\n   * When `true`, forces the card to occupy 100% of its parent's width.\r\n   * @default false\r\n   */\r\n  fullWidth?: boolean;\r\n};\r\n\r\nexport const Card = ({ children, fullWidth, size = 'md' }: Props) => {\r\n  const classNames = clsx(styles.cardBody, fullWidth && styles.fullWidth);\r\n\r\n  return (\r\n    <div className={classNames} data-cardsize={size}>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n","import { ComponentPropsWithoutRef } from 'react'\r\n\r\nimport { CheckIcon } from '@radix-ui/react-icons'\r\nimport { Checkbox as RadixCheckbox } from 'radix-ui'\r\n\r\nimport s from './checkbox.module.scss'\r\n\r\ntype CheckboxProps = {\r\n  /** **Required**: Unique identifier for the checkbox */\r\n  idProp: string\r\n  /** Label displayed next to the checkbox */\r\n  label?: string\r\n  /** Additional class name for styling */\r\n  className?: string\r\n  /** Disables the checkbox */\r\n  disabled?: boolean\r\n  /** Controls the checked state (if controlled externally) */\r\n  checked?: boolean\r\n} & ComponentPropsWithoutRef<typeof RadixCheckbox.Root>\r\n\r\nexport const Checkbox = ({ label, idProp, className, disabled, ...props }: CheckboxProps) => (\r\n  <div style={{ display: 'flex', alignItems: 'center' }}>\r\n    <RadixCheckbox.Root\r\n      className={s.Root}\r\n      defaultChecked\r\n      id={idProp}\r\n      aria-disabled={disabled}\r\n      {...props}\r\n    >\r\n      <RadixCheckbox.Indicator className={s.Indicator} aria-disabled={disabled}>\r\n        <CheckIcon />\r\n      </RadixCheckbox.Indicator>\r\n    </RadixCheckbox.Root>\r\n    <label className={s.Label} htmlFor={idProp} aria-disabled={disabled}>\r\n      {label}\r\n    </label>\r\n  </div>\r\n)\r\n","import * as React from 'react'\r\nimport { ComponentPropsWithoutRef, ElementRef, ForwardedRef } from 'react'\r\n\r\nimport clsx from 'clsx'\r\nimport { Select } from 'radix-ui'\r\n\r\nimport s from './selectbox.module.scss'\r\n\r\ntype SelectItemProps = {\r\n  value: string\r\n  children: React.ReactNode\r\n} & ComponentPropsWithoutRef<typeof Select.Item>\r\n\r\nexport const SelectItem = React.forwardRef<ElementRef<typeof Select.Item>, SelectItemProps>(\r\n  (\r\n    { children, className, ...props }: SelectItemProps,\r\n    forwardedRef: ForwardedRef<ElementRef<typeof Select.Item>>\r\n  ): React.ReactElement => {\r\n    return (\r\n      <Select.Item className={clsx(s.Item, className)} {...props} ref={forwardedRef}>\r\n        <Select.ItemText className={s.ItemContent}>{children}</Select.ItemText>\r\n      </Select.Item>\r\n    )\r\n  }\r\n)\r\n","import {ComponentPropsWithoutRef, FC} from 'react'\r\n\r\nimport {ChevronDownIcon} from '@radix-ui/react-icons'\r\nimport {Select} from 'radix-ui'\r\n\r\nimport '../../styles/index.scss'\r\n\r\nimport s from './selectbox.module.scss'\r\n\r\nimport {SelectItem} from './SelectItem'\r\nimport {UniversalIcon} from \"../common/unversalIcon/UniversalIcon\";\r\nimport {clsx} from \"clsx\";\r\n\r\ntype LanguageType = 'rus' | 'eng'\r\n\r\ntype OptionType = {\r\n  value: LanguageType | string,\r\n  label: string,\r\n  icon?: string\r\n}\r\n\r\ntype SelectboxProps = {\r\n  /** **Required**: Unique ID for the Select. Trigger and associated label */\r\n  idProp: string\r\n  /** **Required**: Name attribute for the form (useful when submitting forms) */\r\n  name: string\r\n  /** **Required**: Array of options to choose from, each with a label (display text) and value */\r\n  options: OptionType[]\r\n  /** Placeholder text shown when no option is selected */\r\n  placeholder?: string\r\n  /** Initial value */\r\n  value?: string;\r\n  /** Label displayed above the select input */\r\n  label?: string\r\n  /** Disables the select input */\r\n  disabled?: boolean\r\n  /** Additional CSS class names for the root element */\r\n  className?: string\r\n  /** If true, the select input stretches to the full width of its container */\r\n  fullWidth?: boolean\r\n  /** Callback fired when the selected value changes */\r\n  onValueChange?: (value: string) => void\r\n  /** Callback fired when the dropdown opens or closes */\r\n  onOpenChange?: (open: boolean) => void\r\n} & Omit<ComponentPropsWithoutRef<typeof Select.Root>, 'value' | 'onValueChange' | 'children'>\r\n\r\nexport const Selectbox: FC<SelectboxProps> = ({\r\n                                                idProp,\r\n                                                name,\r\n                                                label = '',\r\n                                                placeholder = 'Select...',\r\n                                                disabled = false,\r\n                                                className,\r\n                                                value,\r\n                                                fullWidth,\r\n                                                onValueChange,\r\n                                                onOpenChange,\r\n                                                options,\r\n                                                ...rest\r\n                                              }: SelectboxProps) => {\r\n  const selectedOption: OptionType | undefined = options.find(opt => opt.value === value);\r\n\r\n  return (\r\n    <Select.Root onValueChange={onValueChange} onOpenChange={onOpenChange} {...rest}>\r\n      {label && (\r\n        <label htmlFor={idProp} className={s.Label}>\r\n          {label}\r\n        </label>\r\n      )}\r\n      <Select.Trigger\r\n        id={idProp}\r\n        className={clsx(s.Trigger, fullWidth && s.fullWidth)}\r\n        disabled={disabled}\r\n        aria-label={label}\r\n        data-label={label ? 'true' : 'false'}\r\n        name={name}\r\n      >\r\n        {selectedOption ? (\r\n          <div className={s.Selected}>\r\n            {selectedOption.icon && (\r\n              <span className={s.IconWrapper}><UniversalIcon name={selectedOption.icon}/></span>\r\n            )}\r\n            {selectedOption.label}\r\n          </div>\r\n        ) : (\r\n          <Select.Value placeholder={placeholder}/>\r\n        )}\r\n        <Select.Icon className={s.Icon}>\r\n          <ChevronDownIcon/>\r\n        </Select.Icon>\r\n      </Select.Trigger>\r\n\r\n      <Select.Portal>\r\n        <Select.Content className={s.Content} side={'bottom'} position={'popper'}>\r\n          <Select.Viewport className={s.Viewport}>\r\n            <Select.Group>\r\n              {options.map(option => (\r\n                <SelectItem className={s.Selected} key={option.value} value={option.value}>\r\n                  {option.icon && <span><UniversalIcon name={option.icon}/></span>}\r\n                  {option.label}\r\n                </SelectItem>\r\n              ))}\r\n            </Select.Group>\r\n          </Select.Viewport>\r\n        </Select.Content>\r\n      </Select.Portal>\r\n    </Select.Root>\r\n  )\r\n}\r\n","import {Selectbox} from \"../selectbox\";\r\nimport {UniversalIcon} from \"../common/unversalIcon/UniversalIcon\";\r\nimport {Button} from \"../button\";\r\n\r\nimport '../../styles/index.scss'\r\nimport s from './header.module.scss'\r\n\r\ntype Props = {\r\n  /** **Required**: Indicates if the user is authenticated */\r\n  isAuth: boolean,\r\n  /** Indicates if the user is authenticated */\r\n  isProcessingAuth?: boolean,\r\n  /** **Required**: Current selected localization value */\r\n  localization: string,\r\n  /** Optional number of notifications to display. If not provided, defaults to 0 */\r\n  notificationCount?: number,\r\n}\r\n\r\nexport const Header = ({\r\n                         isAuth,\r\n                         isProcessingAuth = false,\r\n                         localization,\r\n                         notificationCount = 0\r\n                       }: Props) => {\r\n  const convertNumber = (notificationCount: number): string => {\r\n    return notificationCount > 9 ? `9+` : `${notificationCount}`\r\n  }\r\n\r\n  return (\r\n    <header className={s.Header}>\r\n      <div>\r\n          <span className={s.Logo}>\r\n            Inctagram\r\n          </span>\r\n      </div>\r\n      <div className={s.Content}>\r\n        {isAuth && (\r\n          <div className={s.IconWrapper} data-notificationcount={convertNumber(notificationCount)}>\r\n            <UniversalIcon name={'outline-bell'}/>\r\n          </div>\r\n        )}\r\n        <Selectbox value={localization} name={'aaa'}\r\n                   options={[\r\n                     {label: 'Russian', value: 'rus', icon: 'Flag-Russia'},\r\n                     {label: 'English', value: 'eng', icon: 'Flag-United-Kingdom'}\r\n                   ]}\r\n                   idProp={localization}\r\n        />\r\n        {!isAuth && !isProcessingAuth && (\r\n          <>\r\n            <Button variant='text_button'>Sign in</Button>\r\n            <Button variant='primary'>Sign up</Button>\r\n          </>\r\n        )}\r\n      </div>\r\n    </header>\r\n  )\r\n}\r\n","import { InputHTMLAttributes, useState } from 'react'\r\n\r\nimport { clsx } from 'clsx'\r\n\r\nimport s from './input.module.scss'\r\n\r\nimport { UniversalIcon } from '@/components'\r\n\r\ntype InputVariant = 'search' | 'email' | 'password' | 'text'\r\n\r\ntype InputProps = InputHTMLAttributes<HTMLInputElement> & {\r\n  /** Defines the visual style of the input (e.g., \"search\", \"password\", \"text\"). */\r\n  inputType: InputVariant\r\n  /**  Optional label text displayed above the input field. */\r\n  label?: string\r\n  /** Error message displayed below the input when error is true. */\r\n  errorText?: string\r\n  /** \tIf true, the input spans 100% of its container width. */\r\n  fullWidth?: boolean\r\n}\r\n\r\nexport const Input = ({\r\n  id,\r\n  label,\r\n  inputType,\r\n  errorText,\r\n  disabled = false,\r\n  fullWidth = false,\r\n  required,\r\n  ...rest\r\n}: InputProps) => {\r\n  const [showPassword, setShowPassword] = useState(false)\r\n\r\n  const containerClassNames = clsx(s.inputContainer, errorText && s.error, fullWidth && s.fullWidth)\r\n\r\n  const isPassword = inputType === 'password'\r\n  const isSearch = inputType === 'search'\r\n\r\n  const currentInputType = (variants: InputVariant) => {\r\n    if (isPassword) {\r\n      return showPassword ? 'text' : 'password'\r\n    } else {\r\n      return variants\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={s.wrapper}>\r\n      {label && (\r\n        <label\r\n          data-requiredfield={required}\r\n          htmlFor={id}\r\n          className={s.label}\r\n          data-disabled={disabled}\r\n        >\r\n          {label}\r\n        </label>\r\n      )}\r\n      <div className={containerClassNames} data-disabled={disabled}>\r\n        {isSearch && (\r\n          <button type={'submit'} className={s.iconButton} data-disabled={disabled}>\r\n            <UniversalIcon name={'search'} />\r\n          </button>\r\n        )}\r\n        <input\r\n          id={id}\r\n          type={currentInputType(inputType)}\r\n          required={required}\r\n          className={s.input}\r\n          autoComplete={'off'}\r\n          {...rest}\r\n        />\r\n\r\n        {isPassword && (\r\n          <button\r\n            type={'button'}\r\n            className={s.iconButton}\r\n            onClick={() => setShowPassword(!showPassword)}\r\n          >\r\n            {showPassword ? (\r\n              <UniversalIcon name={'eye-outline'} />\r\n            ) : (\r\n              <UniversalIcon name={'eye-off-outline'} />\r\n            )}\r\n          </button>\r\n        )}\r\n      </div>\r\n\r\n      {errorText && <div className={s.errorText}>{errorText}</div>}\r\n    </div>\r\n  )\r\n}\r\n","import { ComponentProps, InputHTMLAttributes, ReactElement } from 'react'\r\n\r\nimport { RadioGroup } from 'radix-ui'\r\n\r\nimport styles from './radio.module.scss'\r\n\r\nexport type RadioOptionsType = {\r\n  id: string\r\n  radioName: string\r\n}\r\n\r\ntype Props = ComponentProps<typeof RadioGroup.Root> &\r\n  InputHTMLAttributes<HTMLInputElement> & {\r\n    /** **Required**:Array of radio button options*/\r\n    options: RadioOptionsType[]\r\n    /** Disables all radio buttons */\r\n    selectedOption?: string\r\n  }\r\n\r\nexport const Radio = ({ options, defaultValue, disabled, ...rest }: Props): ReactElement => (\r\n  <RadioGroup.Root\r\n    className={styles.Root}\r\n    defaultValue={'default'}\r\n    aria-label={'View density'}\r\n    {...rest}\r\n  >\r\n    {options?.length &&\r\n      options.map(option => (\r\n        <div\r\n          className={disabled ? styles.disabled : ''}\r\n          style={{ display: 'flex', alignItems: 'center' }}\r\n          key={option.id}\r\n        >\r\n          <RadioGroup.Item className={styles.Item} value={option.radioName} id={option.id}>\r\n            <RadioGroup.Indicator className={styles.Indicator} />\r\n          </RadioGroup.Item>\r\n          <label className={styles.Label} htmlFor={option.id}>\r\n            {option.radioName}\r\n          </label>\r\n        </div>\r\n      ))}\r\n  </RadioGroup.Root>\r\n)\r\n","import { ReactElement } from 'react'\r\nimport ReCAPTCHA from 'react-google-recaptcha'\r\n\r\nimport { clsx } from 'clsx'\r\n\r\nimport styles from './ReCaptcha.module.scss'\r\n\r\ntype Props = {\r\n  /** **Required**: Tracks if captcha verification was completed successfully */\r\n  isCaptchaPassed: boolean\r\n  /** **Required**: Callback that receives the verification token string */\r\n  setCaptchaToken: (token: string) => void\r\n  siteKey: string\r\n}\r\n\r\n/**\r\n * ReCaptcha component that integrates Google reCAPTCHA v2\r\n * @component\r\n * @param {Object} props - Component props\r\n * @param {boolean} props.isCaptchaPassed - Flag indicating if captcha was successfully passed\r\n * @param {function(string): void} props.setCaptchaToken - Callback function to set the captcha token\r\n * @returns {JSX.Element} - Rendered reCAPTCHA component\r\n *\r\n * @example\r\n * // Basic usage\r\n * <ReCaptcha\r\n *   isCaptchaPassed={isVerified}\r\n *   setCaptchaToken={(token) => setToken(token)}\r\n * />\r\n */\r\n\r\nexport const ReCaptcha = ({ isCaptchaPassed, setCaptchaToken, siteKey, ...rest }: Props): ReactElement => {\r\n  const submitHandler = (token: string | null) => {\r\n    if (isCaptchaPassed && token) {\r\n      setCaptchaToken(token)\r\n    }\r\n  }\r\n\r\n  const classNames = clsx(styles.reCaptchaWrapper, !isCaptchaPassed && styles.reCaptchaError)\r\n\r\n  return (\r\n    <div className={classNames}>\r\n      <ReCAPTCHA\r\n        sitekey={siteKey}\r\n        onChange={submitHandler}\r\n        theme={'dark'}\r\n        {...rest}\r\n      />\r\n      {!isCaptchaPassed && (\r\n        <span className={styles.reCaptchaText}>Please verify that you are not a robot</span>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n","import { ComponentPropsWithoutRef, ElementType } from 'react'\r\n\r\nimport { clsx } from 'clsx'\r\n\r\nimport s from './textArea.module.scss'\r\n\r\nexport const textAreaVariant = ['default']\r\n\r\nexport type TextAreaVariant = (typeof textAreaVariant)[number]\r\n\r\nexport type TextAreaProps<T extends ElementType = 'textarea'> = {\r\n  /**\r\n   * Custom component or HTML element to render instead of the default 'textarea'.\r\n   * Useful for styling or using a wrapper component.\r\n   */\r\n  as?: T\r\n  /**\r\n   * Visual style variant for the TextArea (e.g. 'default', etc.).\r\n   */\r\n  variant?: TextAreaVariant\r\n  /**\r\n   * Label text displayed above the TextArea.\r\n   */\r\n  label?: string\r\n  /**\r\n   * If true, displays the component in an error state.\r\n   */\r\n  error?: boolean\r\n  /**\r\n   * Error message shown below the TextArea when `error` is true.\r\n   */\r\n  errorText?: string\r\n  /**\r\n   * If true, makes the TextArea take up the full width of its container.\r\n   */\r\n  fullWidth?: boolean\r\n  /**\r\n   * **Required**: ID for Text area.\r\n   */\r\n  id: string\r\n  asChild?: boolean\r\n} & ComponentPropsWithoutRef<T>\r\n\r\nexport const TextAreaComponent = <T extends ElementType = 'textarea'>(props: TextAreaProps<T>) => {\r\n  const {\r\n    className,\r\n    variant = 'default',\r\n    label,\r\n    error,\r\n    errorText,\r\n    disabled = false,\r\n    fullWidth = false,\r\n    id,\r\n    ...rest\r\n  } = props\r\n\r\n  const classNames = clsx(\r\n    s.textArea,\r\n    error ? s.error : s[variant],\r\n    disabled && s.disabled,\r\n    fullWidth && s.fullWidth,\r\n    className\r\n  )\r\n\r\n  return (\r\n    <div className={s.bodyTextArea}>\r\n      {label && (\r\n        <label className={s.label} htmlFor={id}>\r\n          {label}\r\n        </label>\r\n      )}\r\n      <textarea className={classNames} disabled={disabled} id={id} {...rest} />\r\n      {error && errorText && <div className={s.errorText}>{errorText}</div>}\r\n    </div>\r\n  )\r\n}\r\n"],"names":["UniversalIcon","name","svgElement","setSvgElement","React","res","svgString","parsed","parse","Alert","children","variant","onClose","closable","fullWidth","rest","classNames","clsx","s","jsx","jsxs","buttonVariant","Button","as","className","Card","size","styles","Checkbox","label","idProp","disabled","props","RadixCheckbox","CheckIcon","SelectItem","forwardedRef","Select","Selectbox","placeholder","value","onValueChange","onOpenChange","options","selectedOption","opt","ChevronDownIcon","option","Header","isAuth","isProcessingAuth","localization","notificationCount","convertNumber","Fragment","Input","id","inputType","errorText","required","showPassword","setShowPassword","useState","containerClassNames","isPassword","isSearch","currentInputType","variants","Radio","defaultValue","RadioGroup","ReCaptcha","isCaptchaPassed","setCaptchaToken","siteKey","submitHandler","token","ReCAPTCHA","textAreaVariant","TextAreaComponent","error"],"mappings":"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"}