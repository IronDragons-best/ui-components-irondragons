{"version":3,"file":"index.js","sources":["../src/components/button/Button.tsx","../src/components/textArea/TextArea.tsx","../src/components/radio/Radio.tsx","../src/components/reCaptcha/ReCaptcha.tsx"],"sourcesContent":["import { ComponentPropsWithoutRef, ElementType, ReactNode } from 'react'\r\n\r\nimport clsx from 'clsx'\r\n\r\nimport s from './button.module.scss'\r\n\r\nexport const buttonVariant = ['primary', 'secondary', 'outline', 'text_button'] as const\r\nexport type ButtonVariant = (typeof buttonVariant)[number]\r\n\r\nexport type ButtonOwnProps<T extends ElementType = 'button'> = {\r\n  /**  * The element or component to render as. For example, 'button', 'a' etc. Default = 'button */\r\n  as?: T\r\n  /**  * Makes the button take up the full width of its container. */\r\n  fullWidth?: boolean\r\n  /**  * Visual style variant of the button.*/\r\n  variant?: ButtonVariant\r\n  /**  * Disables the button.*/\r\n  disabled?: boolean\r\n  /**  **Required**: Button content.*/\r\n  children: ReactNode\r\n}\r\n\r\nexport type ButtonProps<T extends ElementType = 'button'> = ButtonOwnProps<T> &\r\n  Omit<ComponentPropsWithoutRef<T>, keyof ButtonOwnProps<T>>\r\n\r\nexport const Button = <T extends ElementType = 'button'>({\r\n  as,\r\n  children,\r\n  disabled = false,\r\n  fullWidth = false,\r\n  className,\r\n  variant = 'primary',\r\n  ...rest\r\n}: ButtonProps<T>) => {\r\n  const classNames = clsx(s.button, s[variant], fullWidth && s.fullWidth, className)\r\n  const Component = (as || 'button') as ElementType\r\n\r\n  return (\r\n    <Component className={classNames} {...rest}>\r\n      {children}\r\n    </Component>\r\n  )\r\n}\r\n","import { ComponentPropsWithoutRef, ElementType } from 'react'\r\n\r\nimport { clsx } from 'clsx'\r\n\r\nimport s from './textArea.module.scss'\r\n\r\nexport const textAreaVariant = ['default']\r\n\r\nexport type TextAreaVariant = (typeof textAreaVariant)[number]\r\n\r\nexport type TextAreaProps<T extends ElementType = 'textarea'> = {\r\n  /**\r\n   * Custom component or HTML element to render instead of the default 'textarea'.\r\n   * Useful for styling or using a wrapper component.\r\n   */\r\n  as?: T\r\n  /**\r\n   * Visual style variant for the TextArea (e.g. 'default', etc.).\r\n   */\r\n  variant?: TextAreaVariant\r\n  /**\r\n   * Label text displayed above the TextArea.\r\n   */\r\n  label?: string\r\n  /**\r\n   * If true, displays the component in an error state.\r\n   */\r\n  error?: boolean\r\n  /**\r\n   * Error message shown below the TextArea when `error` is true.\r\n   */\r\n  errorText?: string\r\n  /**\r\n   * If true, makes the TextArea take up the full width of its container.\r\n   */\r\n  fullWidth?: boolean\r\n  /**\r\n   * **Required**: Id for Text area.\r\n   */\r\n  id: string\r\n  asChild?: boolean\r\n} & ComponentPropsWithoutRef<T>\r\n\r\nexport const TextAreaComponent = <T extends ElementType = 'textarea'>(props: TextAreaProps<T>) => {\r\n  const {\r\n    className,\r\n    variant = 'default',\r\n    label,\r\n    error,\r\n    errorText,\r\n    disabled = false,\r\n    fullWidth = false,\r\n    id,\r\n    ...rest\r\n  } = props\r\n\r\n  const classNames = clsx(\r\n    s.textArea,\r\n    error ? s.error : s[variant],\r\n    disabled && s.disabled,\r\n    fullWidth && s.fullWidth,\r\n    className\r\n  )\r\n\r\n  return (\r\n    <div className={s.bodyTextArea}>\r\n      {label && (\r\n        <label className={s.label} htmlFor={id}>\r\n          {label}\r\n        </label>\r\n      )}\r\n      <textarea className={classNames} disabled={disabled} id={id} {...rest} />\r\n      {error && errorText && <div className={s.errorText}>{errorText}</div>}\r\n    </div>\r\n  )\r\n}\r\n","import { ComponentProps, InputHTMLAttributes, ReactElement } from 'react'\r\n\r\nimport { RadioGroup } from 'radix-ui'\r\n\r\nimport styles from './radio.module.scss'\r\n\r\nexport type RadioOptionsType = {\r\n  id: string\r\n  radioName: string\r\n}\r\n\r\ntype Props = ComponentProps<typeof RadioGroup.Root> &\r\n  InputHTMLAttributes<HTMLInputElement> & {\r\n    /** **Required**:Array of radio button options*/\r\n    options: RadioOptionsType[]\r\n    /** Disables all radio buttons */\r\n    selectedOption?: string\r\n  }\r\n\r\nexport const Radio = ({ options, defaultValue, disabled, ...rest }: Props): ReactElement => (\r\n  <RadioGroup.Root\r\n    className={styles.Root}\r\n    defaultValue={'default'}\r\n    aria-label={'View density'}\r\n    {...rest}\r\n  >\r\n    {options?.length &&\r\n      options.map(option => (\r\n        <div\r\n          className={disabled ? styles.disabled : ''}\r\n          style={{ display: 'flex', alignItems: 'center' }}\r\n          key={option.id}\r\n        >\r\n          <RadioGroup.Item className={styles.Item} value={option.radioName} id={option.id}>\r\n            <RadioGroup.Indicator className={styles.Indicator} />\r\n          </RadioGroup.Item>\r\n          <label className={styles.Label} htmlFor={option.id}>\r\n            {option.radioName}\r\n          </label>\r\n        </div>\r\n      ))}\r\n  </RadioGroup.Root>\r\n)\r\n","import { ReactElement } from 'react'\r\nimport ReCAPTCHA from 'react-google-recaptcha'\r\n\r\nimport { clsx } from 'clsx'\r\n\r\nimport styles from './ReCaptcha.module.scss'\r\n\r\ntype Props = {\r\n  /** **Required**: Tracks if captcha verification was completed successfully */\r\n  isCaptchaPassed: boolean\r\n  /** **Required**: Callback that receives the verification token string */\r\n  setCaptchaToken: (token: string) => void\r\n}\r\n\r\n/**\r\n * ReCaptcha component that integrates Google reCAPTCHA v2\r\n * @component\r\n * @param {Object} props - Component props\r\n * @param {boolean} props.isCaptchaPassed - Flag indicating if captcha was successfully passed\r\n * @param {function(string): void} props.setCaptchaToken - Callback function to set the captcha token\r\n * @returns {JSX.Element} - Rendered reCAPTCHA component\r\n *\r\n * @example\r\n * // Basic usage\r\n * <ReCaptcha\r\n *   isCaptchaPassed={isVerified}\r\n *   setCaptchaToken={(token) => setToken(token)}\r\n * />\r\n */\r\n\r\nexport const ReCaptcha = ({ isCaptchaPassed, setCaptchaToken }: Props): ReactElement => {\r\n  const submitHandler = (token: string | null) => {\r\n    if (isCaptchaPassed && token) {\r\n      setCaptchaToken(token)\r\n    }\r\n  }\r\n\r\n  const classNames = clsx(styles.reCaptchaWrapper, !isCaptchaPassed && styles.reCaptchaError)\r\n\r\n  return (\r\n    <div className={classNames}>\r\n      <ReCAPTCHA\r\n        sitekey={'6Lc42W4rAAAAALRY3UMLjkJQojl_FCxLdjtDh_6o'}\r\n        onChange={submitHandler}\r\n        theme={'dark'}\r\n      />\r\n      {!isCaptchaPassed && (\r\n        <span className={styles.reCaptchaText}>Please verify that you are not a robot</span>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n"],"names":["buttonVariant","Button","as","children","disabled","fullWidth","className","variant","rest","classNames","clsx","s","textAreaVariant","TextAreaComponent","props","label","error","errorText","id","jsxs","jsx","Radio","options","defaultValue","RadioGroup","styles","option","ReCaptcha","isCaptchaPassed","setCaptchaToken","submitHandler","token","ReCAPTCHA"],"mappings":"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"}